#include "5point.h"
#include "Polynomial.h"
#include "Rpoly.h"

// Enable this for a more robust test against outliers
//#ifdef ROBUST_TEST

using namespace std;
using namespace Eigen;

namespace nghiaho
{

static void ProjectionsFromEssential(const EMatrix &E, PMatrix &P1, PMatrix &P2, PMatrix &P3, PMatrix &P4);
static Vector4d TriangulatePoint(double x1, double y1, double x2, double y2, const PMatrix &P1, const PMatrix &P2);
static double CalcDepth(const Vector4d &X, const PMatrix &P);

bool Solve5PointEssential(double *pts1, double *pts2, int num_pts, std::vector<EMatrix> &ret_E, std::vector<PMatrix> &ret_P, std::vector<int> &ret_inliers)
{
    ret_E.clear();
    ret_P.clear();
    ret_inliers.clear();

    if(num_pts < 5) {
        return false;
    }

    // F is a temp variable, not the F fundamental matrix
    Matrix<double, Dynamic, 9> F(num_pts,9);
    for(int i=0; i < num_pts; i++) {
        double x1 = pts1[i*2];
        double y1 = pts1[i*2+1];

        double x2 = pts2[i*2];
        double y2 = pts2[i*2+1];
        F(i,0) = x1*x2;
        F(i,1) = x2*y1;
        F(i,2) = x2;
        F(i,3) = x1*y2;
        F(i,4) = y1*y2;
        F(i,5) = y2;
        F(i,6) = x1;
        F(i,7) = y1;
        F(i,8) = 1.0;
    }

    JacobiSVD<Matrix<double, Dynamic, 9>>    svd(F, ComputeFullV);

    const double e00 = svd.matrixV()(0,5),
                 e01 = svd.matrixV()(1,5),
                 e02 = svd.matrixV()(2,5),
                 e03 = svd.matrixV()(3,5),
                 e04 = svd.matrixV()(4,5),
                 e05 = svd.matrixV()(5,5),
                 e06 = svd.matrixV()(6,5),
                 e07 = svd.matrixV()(7,5),
                 e08 = svd.matrixV()(8,5),

                 e10 = svd.matrixV()(0,6),
                 e11 = svd.matrixV()(1,6),
                 e12 = svd.matrixV()(2,6),
                 e13 = svd.matrixV()(3,6),
                 e14 = svd.matrixV()(4,6),
                 e15 = svd.matrixV()(5,6),
                 e16 = svd.matrixV()(6,6),
                 e17 = svd.matrixV()(7,6),
                 e18 = svd.matrixV()(8,6),

                 e20 = svd.matrixV()(0,7),
                 e21 = svd.matrixV()(1,7),
                 e22 = svd.matrixV()(2,7),
                 e23 = svd.matrixV()(3,7),
                 e24 = svd.matrixV()(4,7),
                 e25 = svd.matrixV()(5,7),
                 e26 = svd.matrixV()(6,7),
                 e27 = svd.matrixV()(7,7),
                 e28 = svd.matrixV()(8,7),

                 e30 = svd.matrixV()(0,8),
                 e31 = svd.matrixV()(1,8),
                 e32 = svd.matrixV()(2,8),
                 e33 = svd.matrixV()(3,8),
                 e34 = svd.matrixV()(4,8),
                 e35 = svd.matrixV()(5,8),
                 e36 = svd.matrixV()(6,8),
                 e37 = svd.matrixV()(7,8),
                 e38 = svd.matrixV()(8,8);

    // Out symbolic polynomial matrix
    PolyMatrix M(10,10);

    M(0,0)[0] = -e00*e08*e08+2*e02*e06*e08-e00*e07*e07+2*e01*e06*e07+e00*e06*e06-e00*e05*e05+2*e02*e03*e05-e00*e04*e04+2*e01*e03*e04+e00*e03*e03+e00*e02*e02+e00*e01*e01+e00*e00*e00;
    M(0,1)[0] = -e10*e18*e18+2*e12*e16*e18-e10*e17*e17+2*e11*e16*e17+e10*e16*e16-e10*e15*e15+2*e12*e13*e15-e10*e14*e14+2*e11*e13*e14+e10*e13*e13+e10*e12*e12+e10*e11*e11+e10*e10*e10;
    M(0,2)[0] = (2*e02*e06-2*e00*e08)*e18+(2*e01*e06-2*e00*e07)*e17+(2*e02*e08+2*e01*e07+2*e00*e06)*e16+(2*e02*e03-2*e00*e05)*e15+(2*e01*e03-2*e00*e04)*e14+(2*e02*e05+2*e01*e04+2*e00*e03)*e13+(2*e06*e08+2*e03*e05+2*e00*e02)*e12+(2*e06*e07+2*e03*e04+2*e00*e01)*e11+(-e08*e08-e07*e07+e06*e06-e05*e05-e04*e04+e03*e03+e02*e02+e01*e01+3*e00*e00)*e10;
    M(0,3)[0] = -e00*e18*e18+(2*e02*e16+2*e06*e12-2*e08*e10)*e18-e00*e17*e17+(2*e01*e16+2*e06*e11-2*e07*e10)*e17+e00*e16*e16+(2*e08*e12+2*e07*e11+2*e06*e10)*e16-e00*e15*e15+(2*e02*e13+2*e03*e12-2*e05*e10)*e15-e00*e14*e14+(2*e01*e13+2*e03*e11-2*e04*e10)*e14+e00*e13*e13+(2*e05*e12+2*e04*e11+2*e03*e10)*e13+e00*e12*e12+2*e02*e10*e12+e00*e11*e11+2*e01*e10*e11+3*e00*e10*e10;
    M(0,4)[0] = (2*e02*e06-2*e00*e08)*e38+(2*e01*e06-2*e00*e07)*e37+(2*e02*e08+2*e01*e07+2*e00*e06)*e36+(2*e02*e03-2*e00*e05)*e35+(2*e01*e03-2*e00*e04)*e34+(2*e02*e05+2*e01*e04+2*e00*e03)*e33+(2*e06*e08+2*e03*e05+2*e00*e02)*e32+(2*e06*e07+2*e03*e04+2*e00*e01)*e31+(-e08*e08-e07*e07+e06*e06-e05*e05-e04*e04+e03*e03+e02*e02+e01*e01+3*e00*e00)*e30;
    M(0,4)[1] = (2*e02*e06-2*e00*e08)*e28+(2*e01*e06-2*e00*e07)*e27+(2*e02*e08+2*e01*e07+2*e00*e06)*e26+(2*e02*e03-2*e00*e05)*e25+(2*e01*e03-2*e00*e04)*e24+(2*e02*e05+2*e01*e04+2*e00*e03)*e23+(2*e06*e08+2*e03*e05+2*e00*e02)*e22+(2*e06*e07+2*e03*e04+2*e00*e01)*e21+(-e08*e08-e07*e07+e06*e06-e05*e05-e04*e04+e03*e03+e02*e02+e01*e01+3*e00*e00)*e20;
    M(0,5)[0] = (2*e12*e16-2*e10*e18)*e38+(2*e11*e16-2*e10*e17)*e37+(2*e12*e18+2*e11*e17+2*e10*e16)*e36+(2*e12*e13-2*e10*e15)*e35+(2*e11*e13-2*e10*e14)*e34+(2*e12*e15+2*e11*e14+2*e10*e13)*e33+(2*e16*e18+2*e13*e15+2*e10*e12)*e32+(2*e16*e17+2*e13*e14+2*e10*e11)*e31+(-e18*e18-e17*e17+e16*e16-e15*e15-e14*e14+e13*e13+e12*e12+e11*e11+3*e10*e10)*e30;
    M(0,5)[1] = (2*e12*e16-2*e10*e18)*e28+(2*e11*e16-2*e10*e17)*e27+(2*e12*e18+2*e11*e17+2*e10*e16)*e26+(2*e12*e13-2*e10*e15)*e25+(2*e11*e13-2*e10*e14)*e24+(2*e12*e15+2*e11*e14+2*e10*e13)*e23+(2*e16*e18+2*e13*e15+2*e10*e12)*e22+(2*e16*e17+2*e13*e14+2*e10*e11)*e21+(-e18*e18-e17*e17+e16*e16-e15*e15-e14*e14+e13*e13+e12*e12+e11*e11+3*e10*e10)*e20;
    M(0,6)[0] = (-2*e00*e18+2*e02*e16+2*e06*e12-2*e08*e10)*e38+(-2*e00*e17+2*e01*e16+2*e06*e11-2*e07*e10)*e37+(2*e02*e18+2*e01*e17+2*e00*e16+2*e08*e12+2*e07*e11+2*e06*e10)*e36+(-2*e00*e15+2*e02*e13+2*e03*e12-2*e05*e10)*e35+(-2*e00*e14+2*e01*e13+2*e03*e11-2*e04*e10)*e34+(2*e02*e15+2*e01*e14+2*e00*e13+2*e05*e12+2*e04*e11+2*e03*e10)*e33+(2*e06*e18+2*e08*e16+2*e03*e15+2*e05*e13+2*e00*e12+2*e02*e10)*e32+(2*e06*e17+2*e07*e16+2*e03*e14+2*e04*e13+2*e00*e11+2*e01*e10)*e31+(-2*e08*e18-2*e07*e17+2*e06*e16-2*e05*e15-2*e04*e14+2*e03*e13+2*e02*e12+2*e01*e11+6*e00*e10)*e30;
    M(0,6)[1] = (-2*e00*e18+2*e02*e16+2*e06*e12-2*e08*e10)*e28+(-2*e00*e17+2*e01*e16+2*e06*e11-2*e07*e10)*e27+(2*e02*e18+2*e01*e17+2*e00*e16+2*e08*e12+2*e07*e11+2*e06*e10)*e26+(-2*e00*e15+2*e02*e13+2*e03*e12-2*e05*e10)*e25+(-2*e00*e14+2*e01*e13+2*e03*e11-2*e04*e10)*e24+(2*e02*e15+2*e01*e14+2*e00*e13+2*e05*e12+2*e04*e11+2*e03*e10)*e23+(2*e06*e18+2*e08*e16+2*e03*e15+2*e05*e13+2*e00*e12+2*e02*e10)*e22+(2*e06*e17+2*e07*e16+2*e03*e14+2*e04*e13+2*e00*e11+2*e01*e10)*e21+(-2*e08*e18-2*e07*e17+2*e06*e16-2*e05*e15-2*e04*e14+2*e03*e13+2*e02*e12+2*e01*e11+6*e00*e10)*e20;
    M(0,7)[0] = -e00*e38*e38+(2*e02*e36+2*e06*e32-2*e08*e30)*e38-e00*e37*e37+(2*e01*e36+2*e06*e31-2*e07*e30)*e37+e00*e36*e36+(2*e08*e32+2*e07*e31+2*e06*e30)*e36-e00*e35*e35+(2*e02*e33+2*e03*e32-2*e05*e30)*e35-e00*e34*e34+(2*e01*e33+2*e03*e31-2*e04*e30)*e34+e00*e33*e33+(2*e05*e32+2*e04*e31+2*e03*e30)*e33+e00*e32*e32+2*e02*e30*e32+e00*e31*e31+2*e01*e30*e31+3*e00*e30*e30;
    M(0,7)[1] = (-2*e00*e28+2*e02*e26+2*e06*e22-2*e08*e20)*e38+(-2*e00*e27+2*e01*e26+2*e06*e21-2*e07*e20)*e37+(2*e02*e28+2*e01*e27+2*e00*e26+2*e08*e22+2*e07*e21+2*e06*e20)*e36+(-2*e00*e25+2*e02*e23+2*e03*e22-2*e05*e20)*e35+(-2*e00*e24+2*e01*e23+2*e03*e21-2*e04*e20)*e34+(2*e02*e25+2*e01*e24+2*e00*e23+2*e05*e22+2*e04*e21+2*e03*e20)*e33+(2*e06*e28+2*e08*e26+2*e03*e25+2*e05*e23+2*e00*e22+2*e02*e20)*e32+(2*e06*e27+2*e07*e26+2*e03*e24+2*e04*e23+2*e00*e21+2*e01*e20)*e31+(-2*e08*e28-2*e07*e27+2*e06*e26-2*e05*e25-2*e04*e24+2*e03*e23+2*e02*e22+2*e01*e21+6*e00*e20)*e30;
    M(0,7)[2] = -e00*e28*e28+(2*e02*e26+2*e06*e22-2*e08*e20)*e28-e00*e27*e27+(2*e01*e26+2*e06*e21-2*e07*e20)*e27+e00*e26*e26+(2*e08*e22+2*e07*e21+2*e06*e20)*e26-e00*e25*e25+(2*e02*e23+2*e03*e22-2*e05*e20)*e25-e00*e24*e24+(2*e01*e23+2*e03*e21-2*e04*e20)*e24+e00*e23*e23+(2*e05*e22+2*e04*e21+2*e03*e20)*e23+e00*e22*e22+2*e02*e20*e22+e00*e21*e21+2*e01*e20*e21+3*e00*e20*e20;
    M(0,8)[0] = -e10*e38*e38+(2*e12*e36+2*e16*e32-2*e18*e30)*e38-e10*e37*e37+(2*e11*e36+2*e16*e31-2*e17*e30)*e37+e10*e36*e36+(2*e18*e32+2*e17*e31+2*e16*e30)*e36-e10*e35*e35+(2*e12*e33+2*e13*e32-2*e15*e30)*e35-e10*e34*e34+(2*e11*e33+2*e13*e31-2*e14*e30)*e34+e10*e33*e33+(2*e15*e32+2*e14*e31+2*e13*e30)*e33+e10*e32*e32+2*e12*e30*e32+e10*e31*e31+2*e11*e30*e31+3*e10*e30*e30;
    M(0,8)[1] = (-2*e10*e28+2*e12*e26+2*e16*e22-2*e18*e20)*e38+(-2*e10*e27+2*e11*e26+2*e16*e21-2*e17*e20)*e37+(2*e12*e28+2*e11*e27+2*e10*e26+2*e18*e22+2*e17*e21+2*e16*e20)*e36+(-2*e10*e25+2*e12*e23+2*e13*e22-2*e15*e20)*e35+(-2*e10*e24+2*e11*e23+2*e13*e21-2*e14*e20)*e34+(2*e12*e25+2*e11*e24+2*e10*e23+2*e15*e22+2*e14*e21+2*e13*e20)*e33+(2*e16*e28+2*e18*e26+2*e13*e25+2*e15*e23+2*e10*e22+2*e12*e20)*e32+(2*e16*e27+2*e17*e26+2*e13*e24+2*e14*e23+2*e10*e21+2*e11*e20)*e31+(-2*e18*e28-2*e17*e27+2*e16*e26-2*e15*e25-2*e14*e24+2*e13*e23+2*e12*e22+2*e11*e21+6*e10*e20)*e30;
    M(0,8)[2] = -e10*e28*e28+(2*e12*e26+2*e16*e22-2*e18*e20)*e28-e10*e27*e27+(2*e11*e26+2*e16*e21-2*e17*e20)*e27+e10*e26*e26+(2*e18*e22+2*e17*e21+2*e16*e20)*e26-e10*e25*e25+(2*e12*e23+2*e13*e22-2*e15*e20)*e25-e10*e24*e24+(2*e11*e23+2*e13*e21-2*e14*e20)*e24+e10*e23*e23+(2*e15*e22+2*e14*e21+2*e13*e20)*e23+e10*e22*e22+2*e12*e20*e22+e10*e21*e21+2*e11*e20*e21+3*e10*e20*e20;
    M(0,9)[0] = -e30*e38*e38+2*e32*e36*e38-e30*e37*e37+2*e31*e36*e37+e30*e36*e36-e30*e35*e35+2*e32*e33*e35-e30*e34*e34+2*e31*e33*e34+e30*e33*e33+e30*e32*e32+e30*e31*e31+e30*e30*e30;
    M(0,9)[1] = -e20*e38*e38+(2*e22*e36+2*e26*e32-2*e28*e30)*e38-e20*e37*e37+(2*e21*e36+2*e26*e31-2*e27*e30)*e37+e20*e36*e36+(2*e28*e32+2*e27*e31+2*e26*e30)*e36-e20*e35*e35+(2*e22*e33+2*e23*e32-2*e25*e30)*e35-e20*e34*e34+(2*e21*e33+2*e23*e31-2*e24*e30)*e34+e20*e33*e33+(2*e25*e32+2*e24*e31+2*e23*e30)*e33+e20*e32*e32+2*e22*e30*e32+e20*e31*e31+2*e21*e30*e31+3*e20*e30*e30;
    M(0,9)[2] = (2*e22*e26-2*e20*e28)*e38+(2*e21*e26-2*e20*e27)*e37+(2*e22*e28+2*e21*e27+2*e20*e26)*e36+(2*e22*e23-2*e20*e25)*e35+(2*e21*e23-2*e20*e24)*e34+(2*e22*e25+2*e21*e24+2*e20*e23)*e33+(2*e26*e28+2*e23*e25+2*e20*e22)*e32+(2*e26*e27+2*e23*e24+2*e20*e21)*e31+(-e28*e28-e27*e27+e26*e26-e25*e25-e24*e24+e23*e23+e22*e22+e21*e21+3*e20*e20)*e30;
    M(0,9)[3] = -e20*e28*e28+2*e22*e26*e28-e20*e27*e27+2*e21*e26*e27+e20*e26*e26-e20*e25*e25+2*e22*e23*e25-e20*e24*e24+2*e21*e23*e24+e20*e23*e23+e20*e22*e22+e20*e21*e21+e20*e20*e20;
    M(1,0)[0] = -e01*e08*e08+2*e02*e07*e08+e01*e07*e07+2*e00*e06*e07-e01*e06*e06-e01*e05*e05+2*e02*e04*e05+e01*e04*e04+2*e00*e03*e04-e01*e03*e03+e01*e02*e02+e01*e01*e01+e00*e00*e01;
    M(1,1)[0] = -e11*e18*e18+2*e12*e17*e18+e11*e17*e17+2*e10*e16*e17-e11*e16*e16-e11*e15*e15+2*e12*e14*e15+e11*e14*e14+2*e10*e13*e14-e11*e13*e13+e11*e12*e12+e11*e11*e11+e10*e10*e11;
    M(1,2)[0] = (2*e02*e07-2*e01*e08)*e18+(2*e02*e08+2*e01*e07+2*e00*e06)*e17+(2*e00*e07-2*e01*e06)*e16+(2*e02*e04-2*e01*e05)*e15+(2*e02*e05+2*e01*e04+2*e00*e03)*e14+(2*e00*e04-2*e01*e03)*e13+(2*e07*e08+2*e04*e05+2*e01*e02)*e12+(-e08*e08+e07*e07-e06*e06-e05*e05+e04*e04-e03*e03+e02*e02+3*e01*e01+e00*e00)*e11+(2*e06*e07+2*e03*e04+2*e00*e01)*e10;
    M(1,3)[0] = -e01*e18*e18+(2*e02*e17+2*e07*e12-2*e08*e11)*e18+e01*e17*e17+(2*e00*e16+2*e08*e12+2*e07*e11+2*e06*e10)*e17-e01*e16*e16+(2*e07*e10-2*e06*e11)*e16-e01*e15*e15+(2*e02*e14+2*e04*e12-2*e05*e11)*e15+e01*e14*e14+(2*e00*e13+2*e05*e12+2*e04*e11+2*e03*e10)*e14-e01*e13*e13+(2*e04*e10-2*e03*e11)*e13+e01*e12*e12+2*e02*e11*e12+3*e01*e11*e11+2*e00*e10*e11+e01*e10*e10;
    M(1,4)[0] = (2*e02*e07-2*e01*e08)*e38+(2*e02*e08+2*e01*e07+2*e00*e06)*e37+(2*e00*e07-2*e01*e06)*e36+(2*e02*e04-2*e01*e05)*e35+(2*e02*e05+2*e01*e04+2*e00*e03)*e34+(2*e00*e04-2*e01*e03)*e33+(2*e07*e08+2*e04*e05+2*e01*e02)*e32+(-e08*e08+e07*e07-e06*e06-e05*e05+e04*e04-e03*e03+e02*e02+3*e01*e01+e00*e00)*e31+(2*e06*e07+2*e03*e04+2*e00*e01)*e30;
    M(1,4)[1] = (2*e02*e07-2*e01*e08)*e28+(2*e02*e08+2*e01*e07+2*e00*e06)*e27+(2*e00*e07-2*e01*e06)*e26+(2*e02*e04-2*e01*e05)*e25+(2*e02*e05+2*e01*e04+2*e00*e03)*e24+(2*e00*e04-2*e01*e03)*e23+(2*e07*e08+2*e04*e05+2*e01*e02)*e22+(-e08*e08+e07*e07-e06*e06-e05*e05+e04*e04-e03*e03+e02*e02+3*e01*e01+e00*e00)*e21+(2*e06*e07+2*e03*e04+2*e00*e01)*e20;
    M(1,5)[0] = (2*e12*e17-2*e11*e18)*e38+(2*e12*e18+2*e11*e17+2*e10*e16)*e37+(2*e10*e17-2*e11*e16)*e36+(2*e12*e14-2*e11*e15)*e35+(2*e12*e15+2*e11*e14+2*e10*e13)*e34+(2*e10*e14-2*e11*e13)*e33+(2*e17*e18+2*e14*e15+2*e11*e12)*e32+(-e18*e18+e17*e17-e16*e16-e15*e15+e14*e14-e13*e13+e12*e12+3*e11*e11+e10*e10)*e31+(2*e16*e17+2*e13*e14+2*e10*e11)*e30;
    M(1,5)[1] = (2*e12*e17-2*e11*e18)*e28+(2*e12*e18+2*e11*e17+2*e10*e16)*e27+(2*e10*e17-2*e11*e16)*e26+(2*e12*e14-2*e11*e15)*e25+(2*e12*e15+2*e11*e14+2*e10*e13)*e24+(2*e10*e14-2*e11*e13)*e23+(2*e17*e18+2*e14*e15+2*e11*e12)*e22+(-e18*e18+e17*e17-e16*e16-e15*e15+e14*e14-e13*e13+e12*e12+3*e11*e11+e10*e10)*e21+(2*e16*e17+2*e13*e14+2*e10*e11)*e20;
    M(1,6)[0] = (-2*e01*e18+2*e02*e17+2*e07*e12-2*e08*e11)*e38+(2*e02*e18+2*e01*e17+2*e00*e16+2*e08*e12+2*e07*e11+2*e06*e10)*e37+(2*e00*e17-2*e01*e16-2*e06*e11+2*e07*e10)*e36+(-2*e01*e15+2*e02*e14+2*e04*e12-2*e05*e11)*e35+(2*e02*e15+2*e01*e14+2*e00*e13+2*e05*e12+2*e04*e11+2*e03*e10)*e34+(2*e00*e14-2*e01*e13-2*e03*e11+2*e04*e10)*e33+(2*e07*e18+2*e08*e17+2*e04*e15+2*e05*e14+2*e01*e12+2*e02*e11)*e32+(-2*e08*e18+2*e07*e17-2*e06*e16-2*e05*e15+2*e04*e14-2*e03*e13+2*e02*e12+6*e01*e11+2*e00*e10)*e31+(2*e06*e17+2*e07*e16+2*e03*e14+2*e04*e13+2*e00*e11+2*e01*e10)*e30;
    M(1,6)[1] = (-2*e01*e18+2*e02*e17+2*e07*e12-2*e08*e11)*e28+(2*e02*e18+2*e01*e17+2*e00*e16+2*e08*e12+2*e07*e11+2*e06*e10)*e27+(2*e00*e17-2*e01*e16-2*e06*e11+2*e07*e10)*e26+(-2*e01*e15+2*e02*e14+2*e04*e12-2*e05*e11)*e25+(2*e02*e15+2*e01*e14+2*e00*e13+2*e05*e12+2*e04*e11+2*e03*e10)*e24+(2*e00*e14-2*e01*e13-2*e03*e11+2*e04*e10)*e23+(2*e07*e18+2*e08*e17+2*e04*e15+2*e05*e14+2*e01*e12+2*e02*e11)*e22+(-2*e08*e18+2*e07*e17-2*e06*e16-2*e05*e15+2*e04*e14-2*e03*e13+2*e02*e12+6*e01*e11+2*e00*e10)*e21+(2*e06*e17+2*e07*e16+2*e03*e14+2*e04*e13+2*e00*e11+2*e01*e10)*e20;
    M(1,7)[0] = -e01*e38*e38+(2*e02*e37+2*e07*e32-2*e08*e31)*e38+e01*e37*e37+(2*e00*e36+2*e08*e32+2*e07*e31+2*e06*e30)*e37-e01*e36*e36+(2*e07*e30-2*e06*e31)*e36-e01*e35*e35+(2*e02*e34+2*e04*e32-2*e05*e31)*e35+e01*e34*e34+(2*e00*e33+2*e05*e32+2*e04*e31+2*e03*e30)*e34-e01*e33*e33+(2*e04*e30-2*e03*e31)*e33+e01*e32*e32+2*e02*e31*e32+3*e01*e31*e31+2*e00*e30*e31+e01*e30*e30;
    M(1,7)[1] = (-2*e01*e28+2*e02*e27+2*e07*e22-2*e08*e21)*e38+(2*e02*e28+2*e01*e27+2*e00*e26+2*e08*e22+2*e07*e21+2*e06*e20)*e37+(2*e00*e27-2*e01*e26-2*e06*e21+2*e07*e20)*e36+(-2*e01*e25+2*e02*e24+2*e04*e22-2*e05*e21)*e35+(2*e02*e25+2*e01*e24+2*e00*e23+2*e05*e22+2*e04*e21+2*e03*e20)*e34+(2*e00*e24-2*e01*e23-2*e03*e21+2*e04*e20)*e33+(2*e07*e28+2*e08*e27+2*e04*e25+2*e05*e24+2*e01*e22+2*e02*e21)*e32+(-2*e08*e28+2*e07*e27-2*e06*e26-2*e05*e25+2*e04*e24-2*e03*e23+2*e02*e22+6*e01*e21+2*e00*e20)*e31+(2*e06*e27+2*e07*e26+2*e03*e24+2*e04*e23+2*e00*e21+2*e01*e20)*e30;
    M(1,7)[2] = -e01*e28*e28+(2*e02*e27+2*e07*e22-2*e08*e21)*e28+e01*e27*e27+(2*e00*e26+2*e08*e22+2*e07*e21+2*e06*e20)*e27-e01*e26*e26+(2*e07*e20-2*e06*e21)*e26-e01*e25*e25+(2*e02*e24+2*e04*e22-2*e05*e21)*e25+e01*e24*e24+(2*e00*e23+2*e05*e22+2*e04*e21+2*e03*e20)*e24-e01*e23*e23+(2*e04*e20-2*e03*e21)*e23+e01*e22*e22+2*e02*e21*e22+3*e01*e21*e21+2*e00*e20*e21+e01*e20*e20;
    M(1,8)[0] = -e11*e38*e38+(2*e12*e37+2*e17*e32-2*e18*e31)*e38+e11*e37*e37+(2*e10*e36+2*e18*e32+2*e17*e31+2*e16*e30)*e37-e11*e36*e36+(2*e17*e30-2*e16*e31)*e36-e11*e35*e35+(2*e12*e34+2*e14*e32-2*e15*e31)*e35+e11*e34*e34+(2*e10*e33+2*e15*e32+2*e14*e31+2*e13*e30)*e34-e11*e33*e33+(2*e14*e30-2*e13*e31)*e33+e11*e32*e32+2*e12*e31*e32+3*e11*e31*e31+2*e10*e30*e31+e11*e30*e30;
    M(1,8)[1] = (-2*e11*e28+2*e12*e27+2*e17*e22-2*e18*e21)*e38+(2*e12*e28+2*e11*e27+2*e10*e26+2*e18*e22+2*e17*e21+2*e16*e20)*e37+(2*e10*e27-2*e11*e26-2*e16*e21+2*e17*e20)*e36+(-2*e11*e25+2*e12*e24+2*e14*e22-2*e15*e21)*e35+(2*e12*e25+2*e11*e24+2*e10*e23+2*e15*e22+2*e14*e21+2*e13*e20)*e34+(2*e10*e24-2*e11*e23-2*e13*e21+2*e14*e20)*e33+(2*e17*e28+2*e18*e27+2*e14*e25+2*e15*e24+2*e11*e22+2*e12*e21)*e32+(-2*e18*e28+2*e17*e27-2*e16*e26-2*e15*e25+2*e14*e24-2*e13*e23+2*e12*e22+6*e11*e21+2*e10*e20)*e31+(2*e16*e27+2*e17*e26+2*e13*e24+2*e14*e23+2*e10*e21+2*e11*e20)*e30;
    M(1,8)[2] = -e11*e28*e28+(2*e12*e27+2*e17*e22-2*e18*e21)*e28+e11*e27*e27+(2*e10*e26+2*e18*e22+2*e17*e21+2*e16*e20)*e27-e11*e26*e26+(2*e17*e20-2*e16*e21)*e26-e11*e25*e25+(2*e12*e24+2*e14*e22-2*e15*e21)*e25+e11*e24*e24+(2*e10*e23+2*e15*e22+2*e14*e21+2*e13*e20)*e24-e11*e23*e23+(2*e14*e20-2*e13*e21)*e23+e11*e22*e22+2*e12*e21*e22+3*e11*e21*e21+2*e10*e20*e21+e11*e20*e20;
    M(1,9)[0] = -e31*e38*e38+2*e32*e37*e38+e31*e37*e37+2*e30*e36*e37-e31*e36*e36-e31*e35*e35+2*e32*e34*e35+e31*e34*e34+2*e30*e33*e34-e31*e33*e33+e31*e32*e32+e31*e31*e31+e30*e30*e31;
    M(1,9)[1] = -e21*e38*e38+(2*e22*e37+2*e27*e32-2*e28*e31)*e38+e21*e37*e37+(2*e20*e36+2*e28*e32+2*e27*e31+2*e26*e30)*e37-e21*e36*e36+(2*e27*e30-2*e26*e31)*e36-e21*e35*e35+(2*e22*e34+2*e24*e32-2*e25*e31)*e35+e21*e34*e34+(2*e20*e33+2*e25*e32+2*e24*e31+2*e23*e30)*e34-e21*e33*e33+(2*e24*e30-2*e23*e31)*e33+e21*e32*e32+2*e22*e31*e32+3*e21*e31*e31+2*e20*e30*e31+e21*e30*e30;
    M(1,9)[2] = (2*e22*e27-2*e21*e28)*e38+(2*e22*e28+2*e21*e27+2*e20*e26)*e37+(2*e20*e27-2*e21*e26)*e36+(2*e22*e24-2*e21*e25)*e35+(2*e22*e25+2*e21*e24+2*e20*e23)*e34+(2*e20*e24-2*e21*e23)*e33+(2*e27*e28+2*e24*e25+2*e21*e22)*e32+(-e28*e28+e27*e27-e26*e26-e25*e25+e24*e24-e23*e23+e22*e22+3*e21*e21+e20*e20)*e31+(2*e26*e27+2*e23*e24+2*e20*e21)*e30;
    M(1,9)[3] = -e21*e28*e28+2*e22*e27*e28+e21*e27*e27+2*e20*e26*e27-e21*e26*e26-e21*e25*e25+2*e22*e24*e25+e21*e24*e24+2*e20*e23*e24-e21*e23*e23+e21*e22*e22+e21*e21*e21+e20*e20*e21;
    M(2,0)[0] = e02*e08*e08+(2*e01*e07+2*e00*e06)*e08-e02*e07*e07-e02*e06*e06+e02*e05*e05+(2*e01*e04+2*e00*e03)*e05-e02*e04*e04-e02*e03*e03+e02*e02*e02+(e01*e01+e00*e00)*e02;
    M(2,1)[0] = e12*e18*e18+(2*e11*e17+2*e10*e16)*e18-e12*e17*e17-e12*e16*e16+e12*e15*e15+(2*e11*e14+2*e10*e13)*e15-e12*e14*e14-e12*e13*e13+e12*e12*e12+(e11*e11+e10*e10)*e12;
    M(2,2)[0] = (2*e02*e08+2*e01*e07+2*e00*e06)*e18+(2*e01*e08-2*e02*e07)*e17+(2*e00*e08-2*e02*e06)*e16+(2*e02*e05+2*e01*e04+2*e00*e03)*e15+(2*e01*e05-2*e02*e04)*e14+(2*e00*e05-2*e02*e03)*e13+(e08*e08-e07*e07-e06*e06+e05*e05-e04*e04-e03*e03+3*e02*e02+e01*e01+e00*e00)*e12+(2*e07*e08+2*e04*e05+2*e01*e02)*e11+(2*e06*e08+2*e03*e05+2*e00*e02)*e10;
    M(2,3)[0] = e02*e18*e18+(2*e01*e17+2*e00*e16+2*e08*e12+2*e07*e11+2*e06*e10)*e18-e02*e17*e17+(2*e08*e11-2*e07*e12)*e17-e02*e16*e16+(2*e08*e10-2*e06*e12)*e16+e02*e15*e15+(2*e01*e14+2*e00*e13+2*e05*e12+2*e04*e11+2*e03*e10)*e15-e02*e14*e14+(2*e05*e11-2*e04*e12)*e14-e02*e13*e13+(2*e05*e10-2*e03*e12)*e13+3*e02*e12*e12+(2*e01*e11+2*e00*e10)*e12+e02*e11*e11+e02*e10*e10;
    M(2,4)[0] = (2*e02*e08+2*e01*e07+2*e00*e06)*e38+(2*e01*e08-2*e02*e07)*e37+(2*e00*e08-2*e02*e06)*e36+(2*e02*e05+2*e01*e04+2*e00*e03)*e35+(2*e01*e05-2*e02*e04)*e34+(2*e00*e05-2*e02*e03)*e33+(e08*e08-e07*e07-e06*e06+e05*e05-e04*e04-e03*e03+3*e02*e02+e01*e01+e00*e00)*e32+(2*e07*e08+2*e04*e05+2*e01*e02)*e31+(2*e06*e08+2*e03*e05+2*e00*e02)*e30;
    M(2,4)[1] = (2*e02*e08+2*e01*e07+2*e00*e06)*e28+(2*e01*e08-2*e02*e07)*e27+(2*e00*e08-2*e02*e06)*e26+(2*e02*e05+2*e01*e04+2*e00*e03)*e25+(2*e01*e05-2*e02*e04)*e24+(2*e00*e05-2*e02*e03)*e23+(e08*e08-e07*e07-e06*e06+e05*e05-e04*e04-e03*e03+3*e02*e02+e01*e01+e00*e00)*e22+(2*e07*e08+2*e04*e05+2*e01*e02)*e21+(2*e06*e08+2*e03*e05+2*e00*e02)*e20;
    M(2,5)[0] = (2*e12*e18+2*e11*e17+2*e10*e16)*e38+(2*e11*e18-2*e12*e17)*e37+(2*e10*e18-2*e12*e16)*e36+(2*e12*e15+2*e11*e14+2*e10*e13)*e35+(2*e11*e15-2*e12*e14)*e34+(2*e10*e15-2*e12*e13)*e33+(e18*e18-e17*e17-e16*e16+e15*e15-e14*e14-e13*e13+3*e12*e12+e11*e11+e10*e10)*e32+(2*e17*e18+2*e14*e15+2*e11*e12)*e31+(2*e16*e18+2*e13*e15+2*e10*e12)*e30;
    M(2,5)[1] = (2*e12*e18+2*e11*e17+2*e10*e16)*e28+(2*e11*e18-2*e12*e17)*e27+(2*e10*e18-2*e12*e16)*e26+(2*e12*e15+2*e11*e14+2*e10*e13)*e25+(2*e11*e15-2*e12*e14)*e24+(2*e10*e15-2*e12*e13)*e23+(e18*e18-e17*e17-e16*e16+e15*e15-e14*e14-e13*e13+3*e12*e12+e11*e11+e10*e10)*e22+(2*e17*e18+2*e14*e15+2*e11*e12)*e21+(2*e16*e18+2*e13*e15+2*e10*e12)*e20;
    M(2,6)[0] = (2*e02*e18+2*e01*e17+2*e00*e16+2*e08*e12+2*e07*e11+2*e06*e10)*e38+(2*e01*e18-2*e02*e17-2*e07*e12+2*e08*e11)*e37+(2*e00*e18-2*e02*e16-2*e06*e12+2*e08*e10)*e36+(2*e02*e15+2*e01*e14+2*e00*e13+2*e05*e12+2*e04*e11+2*e03*e10)*e35+(2*e01*e15-2*e02*e14-2*e04*e12+2*e05*e11)*e34+(2*e00*e15-2*e02*e13-2*e03*e12+2*e05*e10)*e33+(2*e08*e18-2*e07*e17-2*e06*e16+2*e05*e15-2*e04*e14-2*e03*e13+6*e02*e12+2*e01*e11+2*e00*e10)*e32+(2*e07*e18+2*e08*e17+2*e04*e15+2*e05*e14+2*e01*e12+2*e02*e11)*e31+(2*e06*e18+2*e08*e16+2*e03*e15+2*e05*e13+2*e00*e12+2*e02*e10)*e30;
    M(2,6)[1] = (2*e02*e18+2*e01*e17+2*e00*e16+2*e08*e12+2*e07*e11+2*e06*e10)*e28+(2*e01*e18-2*e02*e17-2*e07*e12+2*e08*e11)*e27+(2*e00*e18-2*e02*e16-2*e06*e12+2*e08*e10)*e26+(2*e02*e15+2*e01*e14+2*e00*e13+2*e05*e12+2*e04*e11+2*e03*e10)*e25+(2*e01*e15-2*e02*e14-2*e04*e12+2*e05*e11)*e24+(2*e00*e15-2*e02*e13-2*e03*e12+2*e05*e10)*e23+(2*e08*e18-2*e07*e17-2*e06*e16+2*e05*e15-2*e04*e14-2*e03*e13+6*e02*e12+2*e01*e11+2*e00*e10)*e22+(2*e07*e18+2*e08*e17+2*e04*e15+2*e05*e14+2*e01*e12+2*e02*e11)*e21+(2*e06*e18+2*e08*e16+2*e03*e15+2*e05*e13+2*e00*e12+2*e02*e10)*e20;
    M(2,7)[0] = e02*e38*e38+(2*e01*e37+2*e00*e36+2*e08*e32+2*e07*e31+2*e06*e30)*e38-e02*e37*e37+(2*e08*e31-2*e07*e32)*e37-e02*e36*e36+(2*e08*e30-2*e06*e32)*e36+e02*e35*e35+(2*e01*e34+2*e00*e33+2*e05*e32+2*e04*e31+2*e03*e30)*e35-e02*e34*e34+(2*e05*e31-2*e04*e32)*e34-e02*e33*e33+(2*e05*e30-2*e03*e32)*e33+3*e02*e32*e32+(2*e01*e31+2*e00*e30)*e32+e02*e31*e31+e02*e30*e30;
    M(2,7)[1] = (2*e02*e28+2*e01*e27+2*e00*e26+2*e08*e22+2*e07*e21+2*e06*e20)*e38+(2*e01*e28-2*e02*e27-2*e07*e22+2*e08*e21)*e37+(2*e00*e28-2*e02*e26-2*e06*e22+2*e08*e20)*e36+(2*e02*e25+2*e01*e24+2*e00*e23+2*e05*e22+2*e04*e21+2*e03*e20)*e35+(2*e01*e25-2*e02*e24-2*e04*e22+2*e05*e21)*e34+(2*e00*e25-2*e02*e23-2*e03*e22+2*e05*e20)*e33+(2*e08*e28-2*e07*e27-2*e06*e26+2*e05*e25-2*e04*e24-2*e03*e23+6*e02*e22+2*e01*e21+2*e00*e20)*e32+(2*e07*e28+2*e08*e27+2*e04*e25+2*e05*e24+2*e01*e22+2*e02*e21)*e31+(2*e06*e28+2*e08*e26+2*e03*e25+2*e05*e23+2*e00*e22+2*e02*e20)*e30;
    M(2,7)[2] = e02*e28*e28+(2*e01*e27+2*e00*e26+2*e08*e22+2*e07*e21+2*e06*e20)*e28-e02*e27*e27+(2*e08*e21-2*e07*e22)*e27-e02*e26*e26+(2*e08*e20-2*e06*e22)*e26+e02*e25*e25+(2*e01*e24+2*e00*e23+2*e05*e22+2*e04*e21+2*e03*e20)*e25-e02*e24*e24+(2*e05*e21-2*e04*e22)*e24-e02*e23*e23+(2*e05*e20-2*e03*e22)*e23+3*e02*e22*e22+(2*e01*e21+2*e00*e20)*e22+e02*e21*e21+e02*e20*e20;
    M(2,8)[0] = e12*e38*e38+(2*e11*e37+2*e10*e36+2*e18*e32+2*e17*e31+2*e16*e30)*e38-e12*e37*e37+(2*e18*e31-2*e17*e32)*e37-e12*e36*e36+(2*e18*e30-2*e16*e32)*e36+e12*e35*e35+(2*e11*e34+2*e10*e33+2*e15*e32+2*e14*e31+2*e13*e30)*e35-e12*e34*e34+(2*e15*e31-2*e14*e32)*e34-e12*e33*e33+(2*e15*e30-2*e13*e32)*e33+3*e12*e32*e32+(2*e11*e31+2*e10*e30)*e32+e12*e31*e31+e12*e30*e30;
    M(2,8)[1] = (2*e12*e28+2*e11*e27+2*e10*e26+2*e18*e22+2*e17*e21+2*e16*e20)*e38+(2*e11*e28-2*e12*e27-2*e17*e22+2*e18*e21)*e37+(2*e10*e28-2*e12*e26-2*e16*e22+2*e18*e20)*e36+(2*e12*e25+2*e11*e24+2*e10*e23+2*e15*e22+2*e14*e21+2*e13*e20)*e35+(2*e11*e25-2*e12*e24-2*e14*e22+2*e15*e21)*e34+(2*e10*e25-2*e12*e23-2*e13*e22+2*e15*e20)*e33+(2*e18*e28-2*e17*e27-2*e16*e26+2*e15*e25-2*e14*e24-2*e13*e23+6*e12*e22+2*e11*e21+2*e10*e20)*e32+(2*e17*e28+2*e18*e27+2*e14*e25+2*e15*e24+2*e11*e22+2*e12*e21)*e31+(2*e16*e28+2*e18*e26+2*e13*e25+2*e15*e23+2*e10*e22+2*e12*e20)*e30;
    M(2,8)[2] = e12*e28*e28+(2*e11*e27+2*e10*e26+2*e18*e22+2*e17*e21+2*e16*e20)*e28-e12*e27*e27+(2*e18*e21-2*e17*e22)*e27-e12*e26*e26+(2*e18*e20-2*e16*e22)*e26+e12*e25*e25+(2*e11*e24+2*e10*e23+2*e15*e22+2*e14*e21+2*e13*e20)*e25-e12*e24*e24+(2*e15*e21-2*e14*e22)*e24-e12*e23*e23+(2*e15*e20-2*e13*e22)*e23+3*e12*e22*e22+(2*e11*e21+2*e10*e20)*e22+e12*e21*e21+e12*e20*e20;
    M(2,9)[0] = e32*e38*e38+(2*e31*e37+2*e30*e36)*e38-e32*e37*e37-e32*e36*e36+e32*e35*e35+(2*e31*e34+2*e30*e33)*e35-e32*e34*e34-e32*e33*e33+e32*e32*e32+(e31*e31+e30*e30)*e32;
    M(2,9)[1] = e22*e38*e38+(2*e21*e37+2*e20*e36+2*e28*e32+2*e27*e31+2*e26*e30)*e38-e22*e37*e37+(2*e28*e31-2*e27*e32)*e37-e22*e36*e36+(2*e28*e30-2*e26*e32)*e36+e22*e35*e35+(2*e21*e34+2*e20*e33+2*e25*e32+2*e24*e31+2*e23*e30)*e35-e22*e34*e34+(2*e25*e31-2*e24*e32)*e34-e22*e33*e33+(2*e25*e30-2*e23*e32)*e33+3*e22*e32*e32+(2*e21*e31+2*e20*e30)*e32+e22*e31*e31+e22*e30*e30;
    M(2,9)[2] = (2*e22*e28+2*e21*e27+2*e20*e26)*e38+(2*e21*e28-2*e22*e27)*e37+(2*e20*e28-2*e22*e26)*e36+(2*e22*e25+2*e21*e24+2*e20*e23)*e35+(2*e21*e25-2*e22*e24)*e34+(2*e20*e25-2*e22*e23)*e33+(e28*e28-e27*e27-e26*e26+e25*e25-e24*e24-e23*e23+3*e22*e22+e21*e21+e20*e20)*e32+(2*e27*e28+2*e24*e25+2*e21*e22)*e31+(2*e26*e28+2*e23*e25+2*e20*e22)*e30;
    M(2,9)[3] = e22*e28*e28+(2*e21*e27+2*e20*e26)*e28-e22*e27*e27-e22*e26*e26+e22*e25*e25+(2*e21*e24+2*e20*e23)*e25-e22*e24*e24-e22*e23*e23+e22*e22*e22+(e21*e21+e20*e20)*e22;
    M(3,0)[0] = -e03*e08*e08+2*e05*e06*e08-e03*e07*e07+2*e04*e06*e07+e03*e06*e06+e03*e05*e05+2*e00*e02*e05+e03*e04*e04+2*e00*e01*e04+e03*e03*e03+(-e02*e02-e01*e01+e00*e00)*e03;
    M(3,1)[0] = -e13*e18*e18+2*e15*e16*e18-e13*e17*e17+2*e14*e16*e17+e13*e16*e16+e13*e15*e15+2*e10*e12*e15+e13*e14*e14+2*e10*e11*e14+e13*e13*e13+(-e12*e12-e11*e11+e10*e10)*e13;
    M(3,2)[0] = (2*e05*e06-2*e03*e08)*e18+(2*e04*e06-2*e03*e07)*e17+(2*e05*e08+2*e04*e07+2*e03*e06)*e16+(2*e06*e08+2*e03*e05+2*e00*e02)*e15+(2*e06*e07+2*e03*e04+2*e00*e01)*e14+(-e08*e08-e07*e07+e06*e06+e05*e05+e04*e04+3*e03*e03-e02*e02-e01*e01+e00*e00)*e13+(2*e00*e05-2*e02*e03)*e12+(2*e00*e04-2*e01*e03)*e11+(2*e02*e05+2*e01*e04+2*e00*e03)*e10;
    M(3,3)[0] = -e03*e18*e18+(2*e05*e16+2*e06*e15-2*e08*e13)*e18-e03*e17*e17+(2*e04*e16+2*e06*e14-2*e07*e13)*e17+e03*e16*e16+(2*e08*e15+2*e07*e14+2*e06*e13)*e16+e03*e15*e15+(2*e05*e13+2*e00*e12+2*e02*e10)*e15+e03*e14*e14+(2*e04*e13+2*e00*e11+2*e01*e10)*e14+3*e03*e13*e13+(-2*e02*e12-2*e01*e11+2*e00*e10)*e13-e03*e12*e12+2*e05*e10*e12-e03*e11*e11+2*e04*e10*e11+e03*e10*e10;
    M(3,4)[0] = (2*e05*e06-2*e03*e08)*e38+(2*e04*e06-2*e03*e07)*e37+(2*e05*e08+2*e04*e07+2*e03*e06)*e36+(2*e06*e08+2*e03*e05+2*e00*e02)*e35+(2*e06*e07+2*e03*e04+2*e00*e01)*e34+(-e08*e08-e07*e07+e06*e06+e05*e05+e04*e04+3*e03*e03-e02*e02-e01*e01+e00*e00)*e33+(2*e00*e05-2*e02*e03)*e32+(2*e00*e04-2*e01*e03)*e31+(2*e02*e05+2*e01*e04+2*e00*e03)*e30;
    M(3,4)[1] = (2*e05*e06-2*e03*e08)*e28+(2*e04*e06-2*e03*e07)*e27+(2*e05*e08+2*e04*e07+2*e03*e06)*e26+(2*e06*e08+2*e03*e05+2*e00*e02)*e25+(2*e06*e07+2*e03*e04+2*e00*e01)*e24+(-e08*e08-e07*e07+e06*e06+e05*e05+e04*e04+3*e03*e03-e02*e02-e01*e01+e00*e00)*e23+(2*e00*e05-2*e02*e03)*e22+(2*e00*e04-2*e01*e03)*e21+(2*e02*e05+2*e01*e04+2*e00*e03)*e20;
    M(3,5)[0] = (2*e15*e16-2*e13*e18)*e38+(2*e14*e16-2*e13*e17)*e37+(2*e15*e18+2*e14*e17+2*e13*e16)*e36+(2*e16*e18+2*e13*e15+2*e10*e12)*e35+(2*e16*e17+2*e13*e14+2*e10*e11)*e34+(-e18*e18-e17*e17+e16*e16+e15*e15+e14*e14+3*e13*e13-e12*e12-e11*e11+e10*e10)*e33+(2*e10*e15-2*e12*e13)*e32+(2*e10*e14-2*e11*e13)*e31+(2*e12*e15+2*e11*e14+2*e10*e13)*e30;
    M(3,5)[1] = (2*e15*e16-2*e13*e18)*e28+(2*e14*e16-2*e13*e17)*e27+(2*e15*e18+2*e14*e17+2*e13*e16)*e26+(2*e16*e18+2*e13*e15+2*e10*e12)*e25+(2*e16*e17+2*e13*e14+2*e10*e11)*e24+(-e18*e18-e17*e17+e16*e16+e15*e15+e14*e14+3*e13*e13-e12*e12-e11*e11+e10*e10)*e23+(2*e10*e15-2*e12*e13)*e22+(2*e10*e14-2*e11*e13)*e21+(2*e12*e15+2*e11*e14+2*e10*e13)*e20;
    M(3,6)[0] = (-2*e03*e18+2*e05*e16+2*e06*e15-2*e08*e13)*e38+(-2*e03*e17+2*e04*e16+2*e06*e14-2*e07*e13)*e37+(2*e05*e18+2*e04*e17+2*e03*e16+2*e08*e15+2*e07*e14+2*e06*e13)*e36+(2*e06*e18+2*e08*e16+2*e03*e15+2*e05*e13+2*e00*e12+2*e02*e10)*e35+(2*e06*e17+2*e07*e16+2*e03*e14+2*e04*e13+2*e00*e11+2*e01*e10)*e34+(-2*e08*e18-2*e07*e17+2*e06*e16+2*e05*e15+2*e04*e14+6*e03*e13-2*e02*e12-2*e01*e11+2*e00*e10)*e33+(2*e00*e15-2*e02*e13-2*e03*e12+2*e05*e10)*e32+(2*e00*e14-2*e01*e13-2*e03*e11+2*e04*e10)*e31+(2*e02*e15+2*e01*e14+2*e00*e13+2*e05*e12+2*e04*e11+2*e03*e10)*e30;
    M(3,6)[1] = (-2*e03*e18+2*e05*e16+2*e06*e15-2*e08*e13)*e28+(-2*e03*e17+2*e04*e16+2*e06*e14-2*e07*e13)*e27+(2*e05*e18+2*e04*e17+2*e03*e16+2*e08*e15+2*e07*e14+2*e06*e13)*e26+(2*e06*e18+2*e08*e16+2*e03*e15+2*e05*e13+2*e00*e12+2*e02*e10)*e25+(2*e06*e17+2*e07*e16+2*e03*e14+2*e04*e13+2*e00*e11+2*e01*e10)*e24+(-2*e08*e18-2*e07*e17+2*e06*e16+2*e05*e15+2*e04*e14+6*e03*e13-2*e02*e12-2*e01*e11+2*e00*e10)*e23+(2*e00*e15-2*e02*e13-2*e03*e12+2*e05*e10)*e22+(2*e00*e14-2*e01*e13-2*e03*e11+2*e04*e10)*e21+(2*e02*e15+2*e01*e14+2*e00*e13+2*e05*e12+2*e04*e11+2*e03*e10)*e20;
    M(3,7)[0] = -e03*e38*e38+(2*e05*e36+2*e06*e35-2*e08*e33)*e38-e03*e37*e37+(2*e04*e36+2*e06*e34-2*e07*e33)*e37+e03*e36*e36+(2*e08*e35+2*e07*e34+2*e06*e33)*e36+e03*e35*e35+(2*e05*e33+2*e00*e32+2*e02*e30)*e35+e03*e34*e34+(2*e04*e33+2*e00*e31+2*e01*e30)*e34+3*e03*e33*e33+(-2*e02*e32-2*e01*e31+2*e00*e30)*e33-e03*e32*e32+2*e05*e30*e32-e03*e31*e31+2*e04*e30*e31+e03*e30*e30;
    M(3,7)[1] = (-2*e03*e28+2*e05*e26+2*e06*e25-2*e08*e23)*e38+(-2*e03*e27+2*e04*e26+2*e06*e24-2*e07*e23)*e37+(2*e05*e28+2*e04*e27+2*e03*e26+2*e08*e25+2*e07*e24+2*e06*e23)*e36+(2*e06*e28+2*e08*e26+2*e03*e25+2*e05*e23+2*e00*e22+2*e02*e20)*e35+(2*e06*e27+2*e07*e26+2*e03*e24+2*e04*e23+2*e00*e21+2*e01*e20)*e34+(-2*e08*e28-2*e07*e27+2*e06*e26+2*e05*e25+2*e04*e24+6*e03*e23-2*e02*e22-2*e01*e21+2*e00*e20)*e33+(2*e00*e25-2*e02*e23-2*e03*e22+2*e05*e20)*e32+(2*e00*e24-2*e01*e23-2*e03*e21+2*e04*e20)*e31+(2*e02*e25+2*e01*e24+2*e00*e23+2*e05*e22+2*e04*e21+2*e03*e20)*e30;
    M(3,7)[2] = -e03*e28*e28+(2*e05*e26+2*e06*e25-2*e08*e23)*e28-e03*e27*e27+(2*e04*e26+2*e06*e24-2*e07*e23)*e27+e03*e26*e26+(2*e08*e25+2*e07*e24+2*e06*e23)*e26+e03*e25*e25+(2*e05*e23+2*e00*e22+2*e02*e20)*e25+e03*e24*e24+(2*e04*e23+2*e00*e21+2*e01*e20)*e24+3*e03*e23*e23+(-2*e02*e22-2*e01*e21+2*e00*e20)*e23-e03*e22*e22+2*e05*e20*e22-e03*e21*e21+2*e04*e20*e21+e03*e20*e20;
    M(3,8)[0] = -e13*e38*e38+(2*e15*e36+2*e16*e35-2*e18*e33)*e38-e13*e37*e37+(2*e14*e36+2*e16*e34-2*e17*e33)*e37+e13*e36*e36+(2*e18*e35+2*e17*e34+2*e16*e33)*e36+e13*e35*e35+(2*e15*e33+2*e10*e32+2*e12*e30)*e35+e13*e34*e34+(2*e14*e33+2*e10*e31+2*e11*e30)*e34+3*e13*e33*e33+(-2*e12*e32-2*e11*e31+2*e10*e30)*e33-e13*e32*e32+2*e15*e30*e32-e13*e31*e31+2*e14*e30*e31+e13*e30*e30;
    M(3,8)[1] = (-2*e13*e28+2*e15*e26+2*e16*e25-2*e18*e23)*e38+(-2*e13*e27+2*e14*e26+2*e16*e24-2*e17*e23)*e37+(2*e15*e28+2*e14*e27+2*e13*e26+2*e18*e25+2*e17*e24+2*e16*e23)*e36+(2*e16*e28+2*e18*e26+2*e13*e25+2*e15*e23+2*e10*e22+2*e12*e20)*e35+(2*e16*e27+2*e17*e26+2*e13*e24+2*e14*e23+2*e10*e21+2*e11*e20)*e34+(-2*e18*e28-2*e17*e27+2*e16*e26+2*e15*e25+2*e14*e24+6*e13*e23-2*e12*e22-2*e11*e21+2*e10*e20)*e33+(2*e10*e25-2*e12*e23-2*e13*e22+2*e15*e20)*e32+(2*e10*e24-2*e11*e23-2*e13*e21+2*e14*e20)*e31+(2*e12*e25+2*e11*e24+2*e10*e23+2*e15*e22+2*e14*e21+2*e13*e20)*e30;
    M(3,8)[2] = -e13*e28*e28+(2*e15*e26+2*e16*e25-2*e18*e23)*e28-e13*e27*e27+(2*e14*e26+2*e16*e24-2*e17*e23)*e27+e13*e26*e26+(2*e18*e25+2*e17*e24+2*e16*e23)*e26+e13*e25*e25+(2*e15*e23+2*e10*e22+2*e12*e20)*e25+e13*e24*e24+(2*e14*e23+2*e10*e21+2*e11*e20)*e24+3*e13*e23*e23+(-2*e12*e22-2*e11*e21+2*e10*e20)*e23-e13*e22*e22+2*e15*e20*e22-e13*e21*e21+2*e14*e20*e21+e13*e20*e20;
    M(3,9)[0] = -e33*e38*e38+2*e35*e36*e38-e33*e37*e37+2*e34*e36*e37+e33*e36*e36+e33*e35*e35+2*e30*e32*e35+e33*e34*e34+2*e30*e31*e34+e33*e33*e33+(-e32*e32-e31*e31+e30*e30)*e33;
    M(3,9)[1] = -e23*e38*e38+(2*e25*e36+2*e26*e35-2*e28*e33)*e38-e23*e37*e37+(2*e24*e36+2*e26*e34-2*e27*e33)*e37+e23*e36*e36+(2*e28*e35+2*e27*e34+2*e26*e33)*e36+e23*e35*e35+(2*e25*e33+2*e20*e32+2*e22*e30)*e35+e23*e34*e34+(2*e24*e33+2*e20*e31+2*e21*e30)*e34+3*e23*e33*e33+(-2*e22*e32-2*e21*e31+2*e20*e30)*e33-e23*e32*e32+2*e25*e30*e32-e23*e31*e31+2*e24*e30*e31+e23*e30*e30;
    M(3,9)[2] = (2*e25*e26-2*e23*e28)*e38+(2*e24*e26-2*e23*e27)*e37+(2*e25*e28+2*e24*e27+2*e23*e26)*e36+(2*e26*e28+2*e23*e25+2*e20*e22)*e35+(2*e26*e27+2*e23*e24+2*e20*e21)*e34+(-e28*e28-e27*e27+e26*e26+e25*e25+e24*e24+3*e23*e23-e22*e22-e21*e21+e20*e20)*e33+(2*e20*e25-2*e22*e23)*e32+(2*e20*e24-2*e21*e23)*e31+(2*e22*e25+2*e21*e24+2*e20*e23)*e30;
    M(3,9)[3] = -e23*e28*e28+2*e25*e26*e28-e23*e27*e27+2*e24*e26*e27+e23*e26*e26+e23*e25*e25+2*e20*e22*e25+e23*e24*e24+2*e20*e21*e24+e23*e23*e23+(-e22*e22-e21*e21+e20*e20)*e23;
    M(4,0)[0] = -e04*e08*e08+2*e05*e07*e08+e04*e07*e07+2*e03*e06*e07-e04*e06*e06+e04*e05*e05+2*e01*e02*e05+e04*e04*e04+(e03*e03-e02*e02+e01*e01-e00*e00)*e04+2*e00*e01*e03;
    M(4,1)[0] = -e14*e18*e18+2*e15*e17*e18+e14*e17*e17+2*e13*e16*e17-e14*e16*e16+e14*e15*e15+2*e11*e12*e15+e14*e14*e14+(e13*e13-e12*e12+e11*e11-e10*e10)*e14+2*e10*e11*e13;
    M(4,2)[0] = (2*e05*e07-2*e04*e08)*e18+(2*e05*e08+2*e04*e07+2*e03*e06)*e17+(2*e03*e07-2*e04*e06)*e16+(2*e07*e08+2*e04*e05+2*e01*e02)*e15+(-e08*e08+e07*e07-e06*e06+e05*e05+3*e04*e04+e03*e03-e02*e02+e01*e01-e00*e00)*e14+(2*e06*e07+2*e03*e04+2*e00*e01)*e13+(2*e01*e05-2*e02*e04)*e12+(2*e02*e05+2*e01*e04+2*e00*e03)*e11+(2*e01*e03-2*e00*e04)*e10;
    M(4,3)[0] = -e04*e18*e18+(2*e05*e17+2*e07*e15-2*e08*e14)*e18+e04*e17*e17+(2*e03*e16+2*e08*e15+2*e07*e14+2*e06*e13)*e17-e04*e16*e16+(2*e07*e13-2*e06*e14)*e16+e04*e15*e15+(2*e05*e14+2*e01*e12+2*e02*e11)*e15+3*e04*e14*e14+(2*e03*e13-2*e02*e12+2*e01*e11-2*e00*e10)*e14+e04*e13*e13+(2*e00*e11+2*e01*e10)*e13-e04*e12*e12+2*e05*e11*e12+e04*e11*e11+2*e03*e10*e11-e04*e10*e10;
    M(4,4)[0] = (2*e05*e07-2*e04*e08)*e38+(2*e05*e08+2*e04*e07+2*e03*e06)*e37+(2*e03*e07-2*e04*e06)*e36+(2*e07*e08+2*e04*e05+2*e01*e02)*e35+(-e08*e08+e07*e07-e06*e06+e05*e05+3*e04*e04+e03*e03-e02*e02+e01*e01-e00*e00)*e34+(2*e06*e07+2*e03*e04+2*e00*e01)*e33+(2*e01*e05-2*e02*e04)*e32+(2*e02*e05+2*e01*e04+2*e00*e03)*e31+(2*e01*e03-2*e00*e04)*e30;
    M(4,4)[1] = (2*e05*e07-2*e04*e08)*e28+(2*e05*e08+2*e04*e07+2*e03*e06)*e27+(2*e03*e07-2*e04*e06)*e26+(2*e07*e08+2*e04*e05+2*e01*e02)*e25+(-e08*e08+e07*e07-e06*e06+e05*e05+3*e04*e04+e03*e03-e02*e02+e01*e01-e00*e00)*e24+(2*e06*e07+2*e03*e04+2*e00*e01)*e23+(2*e01*e05-2*e02*e04)*e22+(2*e02*e05+2*e01*e04+2*e00*e03)*e21+(2*e01*e03-2*e00*e04)*e20;
    M(4,5)[0] = (2*e15*e17-2*e14*e18)*e38+(2*e15*e18+2*e14*e17+2*e13*e16)*e37+(2*e13*e17-2*e14*e16)*e36+(2*e17*e18+2*e14*e15+2*e11*e12)*e35+(-e18*e18+e17*e17-e16*e16+e15*e15+3*e14*e14+e13*e13-e12*e12+e11*e11-e10*e10)*e34+(2*e16*e17+2*e13*e14+2*e10*e11)*e33+(2*e11*e15-2*e12*e14)*e32+(2*e12*e15+2*e11*e14+2*e10*e13)*e31+(2*e11*e13-2*e10*e14)*e30;
    M(4,5)[1] = (2*e15*e17-2*e14*e18)*e28+(2*e15*e18+2*e14*e17+2*e13*e16)*e27+(2*e13*e17-2*e14*e16)*e26+(2*e17*e18+2*e14*e15+2*e11*e12)*e25+(-e18*e18+e17*e17-e16*e16+e15*e15+3*e14*e14+e13*e13-e12*e12+e11*e11-e10*e10)*e24+(2*e16*e17+2*e13*e14+2*e10*e11)*e23+(2*e11*e15-2*e12*e14)*e22+(2*e12*e15+2*e11*e14+2*e10*e13)*e21+(2*e11*e13-2*e10*e14)*e20;
    M(4,6)[0] = (-2*e04*e18+2*e05*e17+2*e07*e15-2*e08*e14)*e38+(2*e05*e18+2*e04*e17+2*e03*e16+2*e08*e15+2*e07*e14+2*e06*e13)*e37+(2*e03*e17-2*e04*e16-2*e06*e14+2*e07*e13)*e36+(2*e07*e18+2*e08*e17+2*e04*e15+2*e05*e14+2*e01*e12+2*e02*e11)*e35+(-2*e08*e18+2*e07*e17-2*e06*e16+2*e05*e15+6*e04*e14+2*e03*e13-2*e02*e12+2*e01*e11-2*e00*e10)*e34+(2*e06*e17+2*e07*e16+2*e03*e14+2*e04*e13+2*e00*e11+2*e01*e10)*e33+(2*e01*e15-2*e02*e14-2*e04*e12+2*e05*e11)*e32+(2*e02*e15+2*e01*e14+2*e00*e13+2*e05*e12+2*e04*e11+2*e03*e10)*e31+(-2*e00*e14+2*e01*e13+2*e03*e11-2*e04*e10)*e30;
    M(4,6)[1] = (-2*e04*e18+2*e05*e17+2*e07*e15-2*e08*e14)*e28+(2*e05*e18+2*e04*e17+2*e03*e16+2*e08*e15+2*e07*e14+2*e06*e13)*e27+(2*e03*e17-2*e04*e16-2*e06*e14+2*e07*e13)*e26+(2*e07*e18+2*e08*e17+2*e04*e15+2*e05*e14+2*e01*e12+2*e02*e11)*e25+(-2*e08*e18+2*e07*e17-2*e06*e16+2*e05*e15+6*e04*e14+2*e03*e13-2*e02*e12+2*e01*e11-2*e00*e10)*e24+(2*e06*e17+2*e07*e16+2*e03*e14+2*e04*e13+2*e00*e11+2*e01*e10)*e23+(2*e01*e15-2*e02*e14-2*e04*e12+2*e05*e11)*e22+(2*e02*e15+2*e01*e14+2*e00*e13+2*e05*e12+2*e04*e11+2*e03*e10)*e21+(-2*e00*e14+2*e01*e13+2*e03*e11-2*e04*e10)*e20;
    M(4,7)[0] = -e04*e38*e38+(2*e05*e37+2*e07*e35-2*e08*e34)*e38+e04*e37*e37+(2*e03*e36+2*e08*e35+2*e07*e34+2*e06*e33)*e37-e04*e36*e36+(2*e07*e33-2*e06*e34)*e36+e04*e35*e35+(2*e05*e34+2*e01*e32+2*e02*e31)*e35+3*e04*e34*e34+(2*e03*e33-2*e02*e32+2*e01*e31-2*e00*e30)*e34+e04*e33*e33+(2*e00*e31+2*e01*e30)*e33-e04*e32*e32+2*e05*e31*e32+e04*e31*e31+2*e03*e30*e31-e04*e30*e30;
    M(4,7)[1] = (-2*e04*e28+2*e05*e27+2*e07*e25-2*e08*e24)*e38+(2*e05*e28+2*e04*e27+2*e03*e26+2*e08*e25+2*e07*e24+2*e06*e23)*e37+(2*e03*e27-2*e04*e26-2*e06*e24+2*e07*e23)*e36+(2*e07*e28+2*e08*e27+2*e04*e25+2*e05*e24+2*e01*e22+2*e02*e21)*e35+(-2*e08*e28+2*e07*e27-2*e06*e26+2*e05*e25+6*e04*e24+2*e03*e23-2*e02*e22+2*e01*e21-2*e00*e20)*e34+(2*e06*e27+2*e07*e26+2*e03*e24+2*e04*e23+2*e00*e21+2*e01*e20)*e33+(2*e01*e25-2*e02*e24-2*e04*e22+2*e05*e21)*e32+(2*e02*e25+2*e01*e24+2*e00*e23+2*e05*e22+2*e04*e21+2*e03*e20)*e31+(-2*e00*e24+2*e01*e23+2*e03*e21-2*e04*e20)*e30;
    M(4,7)[2] = -e04*e28*e28+(2*e05*e27+2*e07*e25-2*e08*e24)*e28+e04*e27*e27+(2*e03*e26+2*e08*e25+2*e07*e24+2*e06*e23)*e27-e04*e26*e26+(2*e07*e23-2*e06*e24)*e26+e04*e25*e25+(2*e05*e24+2*e01*e22+2*e02*e21)*e25+3*e04*e24*e24+(2*e03*e23-2*e02*e22+2*e01*e21-2*e00*e20)*e24+e04*e23*e23+(2*e00*e21+2*e01*e20)*e23-e04*e22*e22+2*e05*e21*e22+e04*e21*e21+2*e03*e20*e21-e04*e20*e20;
    M(4,8)[0] = -e14*e38*e38+(2*e15*e37+2*e17*e35-2*e18*e34)*e38+e14*e37*e37+(2*e13*e36+2*e18*e35+2*e17*e34+2*e16*e33)*e37-e14*e36*e36+(2*e17*e33-2*e16*e34)*e36+e14*e35*e35+(2*e15*e34+2*e11*e32+2*e12*e31)*e35+3*e14*e34*e34+(2*e13*e33-2*e12*e32+2*e11*e31-2*e10*e30)*e34+e14*e33*e33+(2*e10*e31+2*e11*e30)*e33-e14*e32*e32+2*e15*e31*e32+e14*e31*e31+2*e13*e30*e31-e14*e30*e30;
    M(4,8)[1] = (-2*e14*e28+2*e15*e27+2*e17*e25-2*e18*e24)*e38+(2*e15*e28+2*e14*e27+2*e13*e26+2*e18*e25+2*e17*e24+2*e16*e23)*e37+(2*e13*e27-2*e14*e26-2*e16*e24+2*e17*e23)*e36+(2*e17*e28+2*e18*e27+2*e14*e25+2*e15*e24+2*e11*e22+2*e12*e21)*e35+(-2*e18*e28+2*e17*e27-2*e16*e26+2*e15*e25+6*e14*e24+2*e13*e23-2*e12*e22+2*e11*e21-2*e10*e20)*e34+(2*e16*e27+2*e17*e26+2*e13*e24+2*e14*e23+2*e10*e21+2*e11*e20)*e33+(2*e11*e25-2*e12*e24-2*e14*e22+2*e15*e21)*e32+(2*e12*e25+2*e11*e24+2*e10*e23+2*e15*e22+2*e14*e21+2*e13*e20)*e31+(-2*e10*e24+2*e11*e23+2*e13*e21-2*e14*e20)*e30;
    M(4,8)[2] = -e14*e28*e28+(2*e15*e27+2*e17*e25-2*e18*e24)*e28+e14*e27*e27+(2*e13*e26+2*e18*e25+2*e17*e24+2*e16*e23)*e27-e14*e26*e26+(2*e17*e23-2*e16*e24)*e26+e14*e25*e25+(2*e15*e24+2*e11*e22+2*e12*e21)*e25+3*e14*e24*e24+(2*e13*e23-2*e12*e22+2*e11*e21-2*e10*e20)*e24+e14*e23*e23+(2*e10*e21+2*e11*e20)*e23-e14*e22*e22+2*e15*e21*e22+e14*e21*e21+2*e13*e20*e21-e14*e20*e20;
    M(4,9)[0] = -e34*e38*e38+2*e35*e37*e38+e34*e37*e37+2*e33*e36*e37-e34*e36*e36+e34*e35*e35+2*e31*e32*e35+e34*e34*e34+(e33*e33-e32*e32+e31*e31-e30*e30)*e34+2*e30*e31*e33;
    M(4,9)[1] = -e24*e38*e38+(2*e25*e37+2*e27*e35-2*e28*e34)*e38+e24*e37*e37+(2*e23*e36+2*e28*e35+2*e27*e34+2*e26*e33)*e37-e24*e36*e36+(2*e27*e33-2*e26*e34)*e36+e24*e35*e35+(2*e25*e34+2*e21*e32+2*e22*e31)*e35+3*e24*e34*e34+(2*e23*e33-2*e22*e32+2*e21*e31-2*e20*e30)*e34+e24*e33*e33+(2*e20*e31+2*e21*e30)*e33-e24*e32*e32+2*e25*e31*e32+e24*e31*e31+2*e23*e30*e31-e24*e30*e30;
    M(4,9)[2] = (2*e25*e27-2*e24*e28)*e38+(2*e25*e28+2*e24*e27+2*e23*e26)*e37+(2*e23*e27-2*e24*e26)*e36+(2*e27*e28+2*e24*e25+2*e21*e22)*e35+(-e28*e28+e27*e27-e26*e26+e25*e25+3*e24*e24+e23*e23-e22*e22+e21*e21-e20*e20)*e34+(2*e26*e27+2*e23*e24+2*e20*e21)*e33+(2*e21*e25-2*e22*e24)*e32+(2*e22*e25+2*e21*e24+2*e20*e23)*e31+(2*e21*e23-2*e20*e24)*e30;
    M(4,9)[3] = -e24*e28*e28+2*e25*e27*e28+e24*e27*e27+2*e23*e26*e27-e24*e26*e26+e24*e25*e25+2*e21*e22*e25+e24*e24*e24+(e23*e23-e22*e22+e21*e21-e20*e20)*e24+2*e20*e21*e23;
    M(5,0)[0] = e05*e08*e08+(2*e04*e07+2*e03*e06)*e08-e05*e07*e07-e05*e06*e06+e05*e05*e05+(e04*e04+e03*e03+e02*e02-e01*e01-e00*e00)*e05+2*e01*e02*e04+2*e00*e02*e03;
    M(5,1)[0] = e15*e18*e18+(2*e14*e17+2*e13*e16)*e18-e15*e17*e17-e15*e16*e16+e15*e15*e15+(e14*e14+e13*e13+e12*e12-e11*e11-e10*e10)*e15+2*e11*e12*e14+2*e10*e12*e13;
    M(5,2)[0] = (2*e05*e08+2*e04*e07+2*e03*e06)*e18+(2*e04*e08-2*e05*e07)*e17+(2*e03*e08-2*e05*e06)*e16+(e08*e08-e07*e07-e06*e06+3*e05*e05+e04*e04+e03*e03+e02*e02-e01*e01-e00*e00)*e15+(2*e07*e08+2*e04*e05+2*e01*e02)*e14+(2*e06*e08+2*e03*e05+2*e00*e02)*e13+(2*e02*e05+2*e01*e04+2*e00*e03)*e12+(2*e02*e04-2*e01*e05)*e11+(2*e02*e03-2*e00*e05)*e10;
    M(5,3)[0] = e05*e18*e18+(2*e04*e17+2*e03*e16+2*e08*e15+2*e07*e14+2*e06*e13)*e18-e05*e17*e17+(2*e08*e14-2*e07*e15)*e17-e05*e16*e16+(2*e08*e13-2*e06*e15)*e16+3*e05*e15*e15+(2*e04*e14+2*e03*e13+2*e02*e12-2*e01*e11-2*e00*e10)*e15+e05*e14*e14+(2*e01*e12+2*e02*e11)*e14+e05*e13*e13+(2*e00*e12+2*e02*e10)*e13+e05*e12*e12+(2*e04*e11+2*e03*e10)*e12-e05*e11*e11-e05*e10*e10;
    M(5,4)[0] = (2*e05*e08+2*e04*e07+2*e03*e06)*e38+(2*e04*e08-2*e05*e07)*e37+(2*e03*e08-2*e05*e06)*e36+(e08*e08-e07*e07-e06*e06+3*e05*e05+e04*e04+e03*e03+e02*e02-e01*e01-e00*e00)*e35+(2*e07*e08+2*e04*e05+2*e01*e02)*e34+(2*e06*e08+2*e03*e05+2*e00*e02)*e33+(2*e02*e05+2*e01*e04+2*e00*e03)*e32+(2*e02*e04-2*e01*e05)*e31+(2*e02*e03-2*e00*e05)*e30;
    M(5,4)[1] = (2*e05*e08+2*e04*e07+2*e03*e06)*e28+(2*e04*e08-2*e05*e07)*e27+(2*e03*e08-2*e05*e06)*e26+(e08*e08-e07*e07-e06*e06+3*e05*e05+e04*e04+e03*e03+e02*e02-e01*e01-e00*e00)*e25+(2*e07*e08+2*e04*e05+2*e01*e02)*e24+(2*e06*e08+2*e03*e05+2*e00*e02)*e23+(2*e02*e05+2*e01*e04+2*e00*e03)*e22+(2*e02*e04-2*e01*e05)*e21+(2*e02*e03-2*e00*e05)*e20;
    M(5,5)[0] = (2*e15*e18+2*e14*e17+2*e13*e16)*e38+(2*e14*e18-2*e15*e17)*e37+(2*e13*e18-2*e15*e16)*e36+(e18*e18-e17*e17-e16*e16+3*e15*e15+e14*e14+e13*e13+e12*e12-e11*e11-e10*e10)*e35+(2*e17*e18+2*e14*e15+2*e11*e12)*e34+(2*e16*e18+2*e13*e15+2*e10*e12)*e33+(2*e12*e15+2*e11*e14+2*e10*e13)*e32+(2*e12*e14-2*e11*e15)*e31+(2*e12*e13-2*e10*e15)*e30;
    M(5,5)[1] = (2*e15*e18+2*e14*e17+2*e13*e16)*e28+(2*e14*e18-2*e15*e17)*e27+(2*e13*e18-2*e15*e16)*e26+(e18*e18-e17*e17-e16*e16+3*e15*e15+e14*e14+e13*e13+e12*e12-e11*e11-e10*e10)*e25+(2*e17*e18+2*e14*e15+2*e11*e12)*e24+(2*e16*e18+2*e13*e15+2*e10*e12)*e23+(2*e12*e15+2*e11*e14+2*e10*e13)*e22+(2*e12*e14-2*e11*e15)*e21+(2*e12*e13-2*e10*e15)*e20;
    M(5,6)[0] = (2*e05*e18+2*e04*e17+2*e03*e16+2*e08*e15+2*e07*e14+2*e06*e13)*e38+(2*e04*e18-2*e05*e17-2*e07*e15+2*e08*e14)*e37+(2*e03*e18-2*e05*e16-2*e06*e15+2*e08*e13)*e36+(2*e08*e18-2*e07*e17-2*e06*e16+6*e05*e15+2*e04*e14+2*e03*e13+2*e02*e12-2*e01*e11-2*e00*e10)*e35+(2*e07*e18+2*e08*e17+2*e04*e15+2*e05*e14+2*e01*e12+2*e02*e11)*e34+(2*e06*e18+2*e08*e16+2*e03*e15+2*e05*e13+2*e00*e12+2*e02*e10)*e33+(2*e02*e15+2*e01*e14+2*e00*e13+2*e05*e12+2*e04*e11+2*e03*e10)*e32+(-2*e01*e15+2*e02*e14+2*e04*e12-2*e05*e11)*e31+(-2*e00*e15+2*e02*e13+2*e03*e12-2*e05*e10)*e30;
    M(5,6)[1] = (2*e05*e18+2*e04*e17+2*e03*e16+2*e08*e15+2*e07*e14+2*e06*e13)*e28+(2*e04*e18-2*e05*e17-2*e07*e15+2*e08*e14)*e27+(2*e03*e18-2*e05*e16-2*e06*e15+2*e08*e13)*e26+(2*e08*e18-2*e07*e17-2*e06*e16+6*e05*e15+2*e04*e14+2*e03*e13+2*e02*e12-2*e01*e11-2*e00*e10)*e25+(2*e07*e18+2*e08*e17+2*e04*e15+2*e05*e14+2*e01*e12+2*e02*e11)*e24+(2*e06*e18+2*e08*e16+2*e03*e15+2*e05*e13+2*e00*e12+2*e02*e10)*e23+(2*e02*e15+2*e01*e14+2*e00*e13+2*e05*e12+2*e04*e11+2*e03*e10)*e22+(-2*e01*e15+2*e02*e14+2*e04*e12-2*e05*e11)*e21+(-2*e00*e15+2*e02*e13+2*e03*e12-2*e05*e10)*e20;
    M(5,7)[0] = e05*e38*e38+(2*e04*e37+2*e03*e36+2*e08*e35+2*e07*e34+2*e06*e33)*e38-e05*e37*e37+(2*e08*e34-2*e07*e35)*e37-e05*e36*e36+(2*e08*e33-2*e06*e35)*e36+3*e05*e35*e35+(2*e04*e34+2*e03*e33+2*e02*e32-2*e01*e31-2*e00*e30)*e35+e05*e34*e34+(2*e01*e32+2*e02*e31)*e34+e05*e33*e33+(2*e00*e32+2*e02*e30)*e33+e05*e32*e32+(2*e04*e31+2*e03*e30)*e32-e05*e31*e31-e05*e30*e30;
    M(5,7)[1] = (2*e05*e28+2*e04*e27+2*e03*e26+2*e08*e25+2*e07*e24+2*e06*e23)*e38+(2*e04*e28-2*e05*e27-2*e07*e25+2*e08*e24)*e37+(2*e03*e28-2*e05*e26-2*e06*e25+2*e08*e23)*e36+(2*e08*e28-2*e07*e27-2*e06*e26+6*e05*e25+2*e04*e24+2*e03*e23+2*e02*e22-2*e01*e21-2*e00*e20)*e35+(2*e07*e28+2*e08*e27+2*e04*e25+2*e05*e24+2*e01*e22+2*e02*e21)*e34+(2*e06*e28+2*e08*e26+2*e03*e25+2*e05*e23+2*e00*e22+2*e02*e20)*e33+(2*e02*e25+2*e01*e24+2*e00*e23+2*e05*e22+2*e04*e21+2*e03*e20)*e32+(-2*e01*e25+2*e02*e24+2*e04*e22-2*e05*e21)*e31+(-2*e00*e25+2*e02*e23+2*e03*e22-2*e05*e20)*e30;
    M(5,7)[2] = e05*e28*e28+(2*e04*e27+2*e03*e26+2*e08*e25+2*e07*e24+2*e06*e23)*e28-e05*e27*e27+(2*e08*e24-2*e07*e25)*e27-e05*e26*e26+(2*e08*e23-2*e06*e25)*e26+3*e05*e25*e25+(2*e04*e24+2*e03*e23+2*e02*e22-2*e01*e21-2*e00*e20)*e25+e05*e24*e24+(2*e01*e22+2*e02*e21)*e24+e05*e23*e23+(2*e00*e22+2*e02*e20)*e23+e05*e22*e22+(2*e04*e21+2*e03*e20)*e22-e05*e21*e21-e05*e20*e20;
    M(5,8)[0] = e15*e38*e38+(2*e14*e37+2*e13*e36+2*e18*e35+2*e17*e34+2*e16*e33)*e38-e15*e37*e37+(2*e18*e34-2*e17*e35)*e37-e15*e36*e36+(2*e18*e33-2*e16*e35)*e36+3*e15*e35*e35+(2*e14*e34+2*e13*e33+2*e12*e32-2*e11*e31-2*e10*e30)*e35+e15*e34*e34+(2*e11*e32+2*e12*e31)*e34+e15*e33*e33+(2*e10*e32+2*e12*e30)*e33+e15*e32*e32+(2*e14*e31+2*e13*e30)*e32-e15*e31*e31-e15*e30*e30;
    M(5,8)[1] = (2*e15*e28+2*e14*e27+2*e13*e26+2*e18*e25+2*e17*e24+2*e16*e23)*e38+(2*e14*e28-2*e15*e27-2*e17*e25+2*e18*e24)*e37+(2*e13*e28-2*e15*e26-2*e16*e25+2*e18*e23)*e36+(2*e18*e28-2*e17*e27-2*e16*e26+6*e15*e25+2*e14*e24+2*e13*e23+2*e12*e22-2*e11*e21-2*e10*e20)*e35+(2*e17*e28+2*e18*e27+2*e14*e25+2*e15*e24+2*e11*e22+2*e12*e21)*e34+(2*e16*e28+2*e18*e26+2*e13*e25+2*e15*e23+2*e10*e22+2*e12*e20)*e33+(2*e12*e25+2*e11*e24+2*e10*e23+2*e15*e22+2*e14*e21+2*e13*e20)*e32+(-2*e11*e25+2*e12*e24+2*e14*e22-2*e15*e21)*e31+(-2*e10*e25+2*e12*e23+2*e13*e22-2*e15*e20)*e30;
    M(5,8)[2] = e15*e28*e28+(2*e14*e27+2*e13*e26+2*e18*e25+2*e17*e24+2*e16*e23)*e28-e15*e27*e27+(2*e18*e24-2*e17*e25)*e27-e15*e26*e26+(2*e18*e23-2*e16*e25)*e26+3*e15*e25*e25+(2*e14*e24+2*e13*e23+2*e12*e22-2*e11*e21-2*e10*e20)*e25+e15*e24*e24+(2*e11*e22+2*e12*e21)*e24+e15*e23*e23+(2*e10*e22+2*e12*e20)*e23+e15*e22*e22+(2*e14*e21+2*e13*e20)*e22-e15*e21*e21-e15*e20*e20;
    M(5,9)[0] = e35*e38*e38+(2*e34*e37+2*e33*e36)*e38-e35*e37*e37-e35*e36*e36+e35*e35*e35+(e34*e34+e33*e33+e32*e32-e31*e31-e30*e30)*e35+2*e31*e32*e34+2*e30*e32*e33;
    M(5,9)[1] = e25*e38*e38+(2*e24*e37+2*e23*e36+2*e28*e35+2*e27*e34+2*e26*e33)*e38-e25*e37*e37+(2*e28*e34-2*e27*e35)*e37-e25*e36*e36+(2*e28*e33-2*e26*e35)*e36+3*e25*e35*e35+(2*e24*e34+2*e23*e33+2*e22*e32-2*e21*e31-2*e20*e30)*e35+e25*e34*e34+(2*e21*e32+2*e22*e31)*e34+e25*e33*e33+(2*e20*e32+2*e22*e30)*e33+e25*e32*e32+(2*e24*e31+2*e23*e30)*e32-e25*e31*e31-e25*e30*e30;
    M(5,9)[2] = (2*e25*e28+2*e24*e27+2*e23*e26)*e38+(2*e24*e28-2*e25*e27)*e37+(2*e23*e28-2*e25*e26)*e36+(e28*e28-e27*e27-e26*e26+3*e25*e25+e24*e24+e23*e23+e22*e22-e21*e21-e20*e20)*e35+(2*e27*e28+2*e24*e25+2*e21*e22)*e34+(2*e26*e28+2*e23*e25+2*e20*e22)*e33+(2*e22*e25+2*e21*e24+2*e20*e23)*e32+(2*e22*e24-2*e21*e25)*e31+(2*e22*e23-2*e20*e25)*e30;
    M(5,9)[3] = e25*e28*e28+(2*e24*e27+2*e23*e26)*e28-e25*e27*e27-e25*e26*e26+e25*e25*e25+(e24*e24+e23*e23+e22*e22-e21*e21-e20*e20)*e25+2*e21*e22*e24+2*e20*e22*e23;
    M(6,0)[0] = e06*e08*e08+(2*e03*e05+2*e00*e02)*e08+e06*e07*e07+(2*e03*e04+2*e00*e01)*e07+e06*e06*e06+(-e05*e05-e04*e04+e03*e03-e02*e02-e01*e01+e00*e00)*e06;
    M(6,1)[0] = e16*e18*e18+(2*e13*e15+2*e10*e12)*e18+e16*e17*e17+(2*e13*e14+2*e10*e11)*e17+e16*e16*e16+(-e15*e15-e14*e14+e13*e13-e12*e12-e11*e11+e10*e10)*e16;
    M(6,2)[0] = (2*e06*e08+2*e03*e05+2*e00*e02)*e18+(2*e06*e07+2*e03*e04+2*e00*e01)*e17+(e08*e08+e07*e07+3*e06*e06-e05*e05-e04*e04+e03*e03-e02*e02-e01*e01+e00*e00)*e16+(2*e03*e08-2*e05*e06)*e15+(2*e03*e07-2*e04*e06)*e14+(2*e05*e08+2*e04*e07+2*e03*e06)*e13+(2*e00*e08-2*e02*e06)*e12+(2*e00*e07-2*e01*e06)*e11+(2*e02*e08+2*e01*e07+2*e00*e06)*e10;
    M(6,3)[0] = e06*e18*e18+(2*e08*e16+2*e03*e15+2*e05*e13+2*e00*e12+2*e02*e10)*e18+e06*e17*e17+(2*e07*e16+2*e03*e14+2*e04*e13+2*e00*e11+2*e01*e10)*e17+3*e06*e16*e16+(-2*e05*e15-2*e04*e14+2*e03*e13-2*e02*e12-2*e01*e11+2*e00*e10)*e16-e06*e15*e15+2*e08*e13*e15-e06*e14*e14+2*e07*e13*e14+e06*e13*e13-e06*e12*e12+2*e08*e10*e12-e06*e11*e11+2*e07*e10*e11+e06*e10*e10;
    M(6,4)[0] = (2*e06*e08+2*e03*e05+2*e00*e02)*e38+(2*e06*e07+2*e03*e04+2*e00*e01)*e37+(e08*e08+e07*e07+3*e06*e06-e05*e05-e04*e04+e03*e03-e02*e02-e01*e01+e00*e00)*e36+(2*e03*e08-2*e05*e06)*e35+(2*e03*e07-2*e04*e06)*e34+(2*e05*e08+2*e04*e07+2*e03*e06)*e33+(2*e00*e08-2*e02*e06)*e32+(2*e00*e07-2*e01*e06)*e31+(2*e02*e08+2*e01*e07+2*e00*e06)*e30;
    M(6,4)[1] = (2*e06*e08+2*e03*e05+2*e00*e02)*e28+(2*e06*e07+2*e03*e04+2*e00*e01)*e27+(e08*e08+e07*e07+3*e06*e06-e05*e05-e04*e04+e03*e03-e02*e02-e01*e01+e00*e00)*e26+(2*e03*e08-2*e05*e06)*e25+(2*e03*e07-2*e04*e06)*e24+(2*e05*e08+2*e04*e07+2*e03*e06)*e23+(2*e00*e08-2*e02*e06)*e22+(2*e00*e07-2*e01*e06)*e21+(2*e02*e08+2*e01*e07+2*e00*e06)*e20;
    M(6,5)[0] = (2*e16*e18+2*e13*e15+2*e10*e12)*e38+(2*e16*e17+2*e13*e14+2*e10*e11)*e37+(e18*e18+e17*e17+3*e16*e16-e15*e15-e14*e14+e13*e13-e12*e12-e11*e11+e10*e10)*e36+(2*e13*e18-2*e15*e16)*e35+(2*e13*e17-2*e14*e16)*e34+(2*e15*e18+2*e14*e17+2*e13*e16)*e33+(2*e10*e18-2*e12*e16)*e32+(2*e10*e17-2*e11*e16)*e31+(2*e12*e18+2*e11*e17+2*e10*e16)*e30;
    M(6,5)[1] = (2*e16*e18+2*e13*e15+2*e10*e12)*e28+(2*e16*e17+2*e13*e14+2*e10*e11)*e27+(e18*e18+e17*e17+3*e16*e16-e15*e15-e14*e14+e13*e13-e12*e12-e11*e11+e10*e10)*e26+(2*e13*e18-2*e15*e16)*e25+(2*e13*e17-2*e14*e16)*e24+(2*e15*e18+2*e14*e17+2*e13*e16)*e23+(2*e10*e18-2*e12*e16)*e22+(2*e10*e17-2*e11*e16)*e21+(2*e12*e18+2*e11*e17+2*e10*e16)*e20;
    M(6,6)[0] = (2*e06*e18+2*e08*e16+2*e03*e15+2*e05*e13+2*e00*e12+2*e02*e10)*e38+(2*e06*e17+2*e07*e16+2*e03*e14+2*e04*e13+2*e00*e11+2*e01*e10)*e37+(2*e08*e18+2*e07*e17+6*e06*e16-2*e05*e15-2*e04*e14+2*e03*e13-2*e02*e12-2*e01*e11+2*e00*e10)*e36+(2*e03*e18-2*e05*e16-2*e06*e15+2*e08*e13)*e35+(2*e03*e17-2*e04*e16-2*e06*e14+2*e07*e13)*e34+(2*e05*e18+2*e04*e17+2*e03*e16+2*e08*e15+2*e07*e14+2*e06*e13)*e33+(2*e00*e18-2*e02*e16-2*e06*e12+2*e08*e10)*e32+(2*e00*e17-2*e01*e16-2*e06*e11+2*e07*e10)*e31+(2*e02*e18+2*e01*e17+2*e00*e16+2*e08*e12+2*e07*e11+2*e06*e10)*e30;
    M(6,6)[1] = (2*e06*e18+2*e08*e16+2*e03*e15+2*e05*e13+2*e00*e12+2*e02*e10)*e28+(2*e06*e17+2*e07*e16+2*e03*e14+2*e04*e13+2*e00*e11+2*e01*e10)*e27+(2*e08*e18+2*e07*e17+6*e06*e16-2*e05*e15-2*e04*e14+2*e03*e13-2*e02*e12-2*e01*e11+2*e00*e10)*e26+(2*e03*e18-2*e05*e16-2*e06*e15+2*e08*e13)*e25+(2*e03*e17-2*e04*e16-2*e06*e14+2*e07*e13)*e24+(2*e05*e18+2*e04*e17+2*e03*e16+2*e08*e15+2*e07*e14+2*e06*e13)*e23+(2*e00*e18-2*e02*e16-2*e06*e12+2*e08*e10)*e22+(2*e00*e17-2*e01*e16-2*e06*e11+2*e07*e10)*e21+(2*e02*e18+2*e01*e17+2*e00*e16+2*e08*e12+2*e07*e11+2*e06*e10)*e20;
    M(6,7)[0] = e06*e38*e38+(2*e08*e36+2*e03*e35+2*e05*e33+2*e00*e32+2*e02*e30)*e38+e06*e37*e37+(2*e07*e36+2*e03*e34+2*e04*e33+2*e00*e31+2*e01*e30)*e37+3*e06*e36*e36+(-2*e05*e35-2*e04*e34+2*e03*e33-2*e02*e32-2*e01*e31+2*e00*e30)*e36-e06*e35*e35+2*e08*e33*e35-e06*e34*e34+2*e07*e33*e34+e06*e33*e33-e06*e32*e32+2*e08*e30*e32-e06*e31*e31+2*e07*e30*e31+e06*e30*e30;
    M(6,7)[1] = (2*e06*e28+2*e08*e26+2*e03*e25+2*e05*e23+2*e00*e22+2*e02*e20)*e38+(2*e06*e27+2*e07*e26+2*e03*e24+2*e04*e23+2*e00*e21+2*e01*e20)*e37+(2*e08*e28+2*e07*e27+6*e06*e26-2*e05*e25-2*e04*e24+2*e03*e23-2*e02*e22-2*e01*e21+2*e00*e20)*e36+(2*e03*e28-2*e05*e26-2*e06*e25+2*e08*e23)*e35+(2*e03*e27-2*e04*e26-2*e06*e24+2*e07*e23)*e34+(2*e05*e28+2*e04*e27+2*e03*e26+2*e08*e25+2*e07*e24+2*e06*e23)*e33+(2*e00*e28-2*e02*e26-2*e06*e22+2*e08*e20)*e32+(2*e00*e27-2*e01*e26-2*e06*e21+2*e07*e20)*e31+(2*e02*e28+2*e01*e27+2*e00*e26+2*e08*e22+2*e07*e21+2*e06*e20)*e30;
    M(6,7)[2] = e06*e28*e28+(2*e08*e26+2*e03*e25+2*e05*e23+2*e00*e22+2*e02*e20)*e28+e06*e27*e27+(2*e07*e26+2*e03*e24+2*e04*e23+2*e00*e21+2*e01*e20)*e27+3*e06*e26*e26+(-2*e05*e25-2*e04*e24+2*e03*e23-2*e02*e22-2*e01*e21+2*e00*e20)*e26-e06*e25*e25+2*e08*e23*e25-e06*e24*e24+2*e07*e23*e24+e06*e23*e23-e06*e22*e22+2*e08*e20*e22-e06*e21*e21+2*e07*e20*e21+e06*e20*e20;
    M(6,8)[0] = e16*e38*e38+(2*e18*e36+2*e13*e35+2*e15*e33+2*e10*e32+2*e12*e30)*e38+e16*e37*e37+(2*e17*e36+2*e13*e34+2*e14*e33+2*e10*e31+2*e11*e30)*e37+3*e16*e36*e36+(-2*e15*e35-2*e14*e34+2*e13*e33-2*e12*e32-2*e11*e31+2*e10*e30)*e36-e16*e35*e35+2*e18*e33*e35-e16*e34*e34+2*e17*e33*e34+e16*e33*e33-e16*e32*e32+2*e18*e30*e32-e16*e31*e31+2*e17*e30*e31+e16*e30*e30;
    M(6,8)[1] = (2*e16*e28+2*e18*e26+2*e13*e25+2*e15*e23+2*e10*e22+2*e12*e20)*e38+(2*e16*e27+2*e17*e26+2*e13*e24+2*e14*e23+2*e10*e21+2*e11*e20)*e37+(2*e18*e28+2*e17*e27+6*e16*e26-2*e15*e25-2*e14*e24+2*e13*e23-2*e12*e22-2*e11*e21+2*e10*e20)*e36+(2*e13*e28-2*e15*e26-2*e16*e25+2*e18*e23)*e35+(2*e13*e27-2*e14*e26-2*e16*e24+2*e17*e23)*e34+(2*e15*e28+2*e14*e27+2*e13*e26+2*e18*e25+2*e17*e24+2*e16*e23)*e33+(2*e10*e28-2*e12*e26-2*e16*e22+2*e18*e20)*e32+(2*e10*e27-2*e11*e26-2*e16*e21+2*e17*e20)*e31+(2*e12*e28+2*e11*e27+2*e10*e26+2*e18*e22+2*e17*e21+2*e16*e20)*e30;
    M(6,8)[2] = e16*e28*e28+(2*e18*e26+2*e13*e25+2*e15*e23+2*e10*e22+2*e12*e20)*e28+e16*e27*e27+(2*e17*e26+2*e13*e24+2*e14*e23+2*e10*e21+2*e11*e20)*e27+3*e16*e26*e26+(-2*e15*e25-2*e14*e24+2*e13*e23-2*e12*e22-2*e11*e21+2*e10*e20)*e26-e16*e25*e25+2*e18*e23*e25-e16*e24*e24+2*e17*e23*e24+e16*e23*e23-e16*e22*e22+2*e18*e20*e22-e16*e21*e21+2*e17*e20*e21+e16*e20*e20;
    M(6,9)[0] = e36*e38*e38+(2*e33*e35+2*e30*e32)*e38+e36*e37*e37+(2*e33*e34+2*e30*e31)*e37+e36*e36*e36+(-e35*e35-e34*e34+e33*e33-e32*e32-e31*e31+e30*e30)*e36;
    M(6,9)[1] = e26*e38*e38+(2*e28*e36+2*e23*e35+2*e25*e33+2*e20*e32+2*e22*e30)*e38+e26*e37*e37+(2*e27*e36+2*e23*e34+2*e24*e33+2*e20*e31+2*e21*e30)*e37+3*e26*e36*e36+(-2*e25*e35-2*e24*e34+2*e23*e33-2*e22*e32-2*e21*e31+2*e20*e30)*e36-e26*e35*e35+2*e28*e33*e35-e26*e34*e34+2*e27*e33*e34+e26*e33*e33-e26*e32*e32+2*e28*e30*e32-e26*e31*e31+2*e27*e30*e31+e26*e30*e30;
    M(6,9)[2] = (2*e26*e28+2*e23*e25+2*e20*e22)*e38+(2*e26*e27+2*e23*e24+2*e20*e21)*e37+(e28*e28+e27*e27+3*e26*e26-e25*e25-e24*e24+e23*e23-e22*e22-e21*e21+e20*e20)*e36+(2*e23*e28-2*e25*e26)*e35+(2*e23*e27-2*e24*e26)*e34+(2*e25*e28+2*e24*e27+2*e23*e26)*e33+(2*e20*e28-2*e22*e26)*e32+(2*e20*e27-2*e21*e26)*e31+(2*e22*e28+2*e21*e27+2*e20*e26)*e30;
    M(6,9)[3] = e26*e28*e28+(2*e23*e25+2*e20*e22)*e28+e26*e27*e27+(2*e23*e24+2*e20*e21)*e27+e26*e26*e26+(-e25*e25-e24*e24+e23*e23-e22*e22-e21*e21+e20*e20)*e26;
    M(7,0)[0] = e07*e08*e08+(2*e04*e05+2*e01*e02)*e08+e07*e07*e07+(e06*e06-e05*e05+e04*e04-e03*e03-e02*e02+e01*e01-e00*e00)*e07+(2*e03*e04+2*e00*e01)*e06;
    M(7,1)[0] = e17*e18*e18+(2*e14*e15+2*e11*e12)*e18+e17*e17*e17+(e16*e16-e15*e15+e14*e14-e13*e13-e12*e12+e11*e11-e10*e10)*e17+(2*e13*e14+2*e10*e11)*e16;
    M(7,2)[0] = (2*e07*e08+2*e04*e05+2*e01*e02)*e18+(e08*e08+3*e07*e07+e06*e06-e05*e05+e04*e04-e03*e03-e02*e02+e01*e01-e00*e00)*e17+(2*e06*e07+2*e03*e04+2*e00*e01)*e16+(2*e04*e08-2*e05*e07)*e15+(2*e05*e08+2*e04*e07+2*e03*e06)*e14+(2*e04*e06-2*e03*e07)*e13+(2*e01*e08-2*e02*e07)*e12+(2*e02*e08+2*e01*e07+2*e00*e06)*e11+(2*e01*e06-2*e00*e07)*e10;
    M(7,3)[0] = e07*e18*e18+(2*e08*e17+2*e04*e15+2*e05*e14+2*e01*e12+2*e02*e11)*e18+3*e07*e17*e17+(2*e06*e16-2*e05*e15+2*e04*e14-2*e03*e13-2*e02*e12+2*e01*e11-2*e00*e10)*e17+e07*e16*e16+(2*e03*e14+2*e04*e13+2*e00*e11+2*e01*e10)*e16-e07*e15*e15+2*e08*e14*e15+e07*e14*e14+2*e06*e13*e14-e07*e13*e13-e07*e12*e12+2*e08*e11*e12+e07*e11*e11+2*e06*e10*e11-e07*e10*e10;
    M(7,4)[0] = (2*e07*e08+2*e04*e05+2*e01*e02)*e38+(e08*e08+3*e07*e07+e06*e06-e05*e05+e04*e04-e03*e03-e02*e02+e01*e01-e00*e00)*e37+(2*e06*e07+2*e03*e04+2*e00*e01)*e36+(2*e04*e08-2*e05*e07)*e35+(2*e05*e08+2*e04*e07+2*e03*e06)*e34+(2*e04*e06-2*e03*e07)*e33+(2*e01*e08-2*e02*e07)*e32+(2*e02*e08+2*e01*e07+2*e00*e06)*e31+(2*e01*e06-2*e00*e07)*e30;
    M(7,4)[1] = (2*e07*e08+2*e04*e05+2*e01*e02)*e28+(e08*e08+3*e07*e07+e06*e06-e05*e05+e04*e04-e03*e03-e02*e02+e01*e01-e00*e00)*e27+(2*e06*e07+2*e03*e04+2*e00*e01)*e26+(2*e04*e08-2*e05*e07)*e25+(2*e05*e08+2*e04*e07+2*e03*e06)*e24+(2*e04*e06-2*e03*e07)*e23+(2*e01*e08-2*e02*e07)*e22+(2*e02*e08+2*e01*e07+2*e00*e06)*e21+(2*e01*e06-2*e00*e07)*e20;
    M(7,5)[0] = (2*e17*e18+2*e14*e15+2*e11*e12)*e38+(e18*e18+3*e17*e17+e16*e16-e15*e15+e14*e14-e13*e13-e12*e12+e11*e11-e10*e10)*e37+(2*e16*e17+2*e13*e14+2*e10*e11)*e36+(2*e14*e18-2*e15*e17)*e35+(2*e15*e18+2*e14*e17+2*e13*e16)*e34+(2*e14*e16-2*e13*e17)*e33+(2*e11*e18-2*e12*e17)*e32+(2*e12*e18+2*e11*e17+2*e10*e16)*e31+(2*e11*e16-2*e10*e17)*e30;
    M(7,5)[1] = (2*e17*e18+2*e14*e15+2*e11*e12)*e28+(e18*e18+3*e17*e17+e16*e16-e15*e15+e14*e14-e13*e13-e12*e12+e11*e11-e10*e10)*e27+(2*e16*e17+2*e13*e14+2*e10*e11)*e26+(2*e14*e18-2*e15*e17)*e25+(2*e15*e18+2*e14*e17+2*e13*e16)*e24+(2*e14*e16-2*e13*e17)*e23+(2*e11*e18-2*e12*e17)*e22+(2*e12*e18+2*e11*e17+2*e10*e16)*e21+(2*e11*e16-2*e10*e17)*e20;
    M(7,6)[0] = (2*e07*e18+2*e08*e17+2*e04*e15+2*e05*e14+2*e01*e12+2*e02*e11)*e38+(2*e08*e18+6*e07*e17+2*e06*e16-2*e05*e15+2*e04*e14-2*e03*e13-2*e02*e12+2*e01*e11-2*e00*e10)*e37+(2*e06*e17+2*e07*e16+2*e03*e14+2*e04*e13+2*e00*e11+2*e01*e10)*e36+(2*e04*e18-2*e05*e17-2*e07*e15+2*e08*e14)*e35+(2*e05*e18+2*e04*e17+2*e03*e16+2*e08*e15+2*e07*e14+2*e06*e13)*e34+(-2*e03*e17+2*e04*e16+2*e06*e14-2*e07*e13)*e33+(2*e01*e18-2*e02*e17-2*e07*e12+2*e08*e11)*e32+(2*e02*e18+2*e01*e17+2*e00*e16+2*e08*e12+2*e07*e11+2*e06*e10)*e31+(-2*e00*e17+2*e01*e16+2*e06*e11-2*e07*e10)*e30;
    M(7,6)[1] = (2*e07*e18+2*e08*e17+2*e04*e15+2*e05*e14+2*e01*e12+2*e02*e11)*e28+(2*e08*e18+6*e07*e17+2*e06*e16-2*e05*e15+2*e04*e14-2*e03*e13-2*e02*e12+2*e01*e11-2*e00*e10)*e27+(2*e06*e17+2*e07*e16+2*e03*e14+2*e04*e13+2*e00*e11+2*e01*e10)*e26+(2*e04*e18-2*e05*e17-2*e07*e15+2*e08*e14)*e25+(2*e05*e18+2*e04*e17+2*e03*e16+2*e08*e15+2*e07*e14+2*e06*e13)*e24+(-2*e03*e17+2*e04*e16+2*e06*e14-2*e07*e13)*e23+(2*e01*e18-2*e02*e17-2*e07*e12+2*e08*e11)*e22+(2*e02*e18+2*e01*e17+2*e00*e16+2*e08*e12+2*e07*e11+2*e06*e10)*e21+(-2*e00*e17+2*e01*e16+2*e06*e11-2*e07*e10)*e20;
    M(7,7)[0] = e07*e38*e38+(2*e08*e37+2*e04*e35+2*e05*e34+2*e01*e32+2*e02*e31)*e38+3*e07*e37*e37+(2*e06*e36-2*e05*e35+2*e04*e34-2*e03*e33-2*e02*e32+2*e01*e31-2*e00*e30)*e37+e07*e36*e36+(2*e03*e34+2*e04*e33+2*e00*e31+2*e01*e30)*e36-e07*e35*e35+2*e08*e34*e35+e07*e34*e34+2*e06*e33*e34-e07*e33*e33-e07*e32*e32+2*e08*e31*e32+e07*e31*e31+2*e06*e30*e31-e07*e30*e30;
    M(7,7)[1] = (2*e07*e28+2*e08*e27+2*e04*e25+2*e05*e24+2*e01*e22+2*e02*e21)*e38+(2*e08*e28+6*e07*e27+2*e06*e26-2*e05*e25+2*e04*e24-2*e03*e23-2*e02*e22+2*e01*e21-2*e00*e20)*e37+(2*e06*e27+2*e07*e26+2*e03*e24+2*e04*e23+2*e00*e21+2*e01*e20)*e36+(2*e04*e28-2*e05*e27-2*e07*e25+2*e08*e24)*e35+(2*e05*e28+2*e04*e27+2*e03*e26+2*e08*e25+2*e07*e24+2*e06*e23)*e34+(-2*e03*e27+2*e04*e26+2*e06*e24-2*e07*e23)*e33+(2*e01*e28-2*e02*e27-2*e07*e22+2*e08*e21)*e32+(2*e02*e28+2*e01*e27+2*e00*e26+2*e08*e22+2*e07*e21+2*e06*e20)*e31+(-2*e00*e27+2*e01*e26+2*e06*e21-2*e07*e20)*e30;
    M(7,7)[2] = e07*e28*e28+(2*e08*e27+2*e04*e25+2*e05*e24+2*e01*e22+2*e02*e21)*e28+3*e07*e27*e27+(2*e06*e26-2*e05*e25+2*e04*e24-2*e03*e23-2*e02*e22+2*e01*e21-2*e00*e20)*e27+e07*e26*e26+(2*e03*e24+2*e04*e23+2*e00*e21+2*e01*e20)*e26-e07*e25*e25+2*e08*e24*e25+e07*e24*e24+2*e06*e23*e24-e07*e23*e23-e07*e22*e22+2*e08*e21*e22+e07*e21*e21+2*e06*e20*e21-e07*e20*e20;
    M(7,8)[0] = e17*e38*e38+(2*e18*e37+2*e14*e35+2*e15*e34+2*e11*e32+2*e12*e31)*e38+3*e17*e37*e37+(2*e16*e36-2*e15*e35+2*e14*e34-2*e13*e33-2*e12*e32+2*e11*e31-2*e10*e30)*e37+e17*e36*e36+(2*e13*e34+2*e14*e33+2*e10*e31+2*e11*e30)*e36-e17*e35*e35+2*e18*e34*e35+e17*e34*e34+2*e16*e33*e34-e17*e33*e33-e17*e32*e32+2*e18*e31*e32+e17*e31*e31+2*e16*e30*e31-e17*e30*e30;
    M(7,8)[1] = (2*e17*e28+2*e18*e27+2*e14*e25+2*e15*e24+2*e11*e22+2*e12*e21)*e38+(2*e18*e28+6*e17*e27+2*e16*e26-2*e15*e25+2*e14*e24-2*e13*e23-2*e12*e22+2*e11*e21-2*e10*e20)*e37+(2*e16*e27+2*e17*e26+2*e13*e24+2*e14*e23+2*e10*e21+2*e11*e20)*e36+(2*e14*e28-2*e15*e27-2*e17*e25+2*e18*e24)*e35+(2*e15*e28+2*e14*e27+2*e13*e26+2*e18*e25+2*e17*e24+2*e16*e23)*e34+(-2*e13*e27+2*e14*e26+2*e16*e24-2*e17*e23)*e33+(2*e11*e28-2*e12*e27-2*e17*e22+2*e18*e21)*e32+(2*e12*e28+2*e11*e27+2*e10*e26+2*e18*e22+2*e17*e21+2*e16*e20)*e31+(-2*e10*e27+2*e11*e26+2*e16*e21-2*e17*e20)*e30;
    M(7,8)[2] = e17*e28*e28+(2*e18*e27+2*e14*e25+2*e15*e24+2*e11*e22+2*e12*e21)*e28+3*e17*e27*e27+(2*e16*e26-2*e15*e25+2*e14*e24-2*e13*e23-2*e12*e22+2*e11*e21-2*e10*e20)*e27+e17*e26*e26+(2*e13*e24+2*e14*e23+2*e10*e21+2*e11*e20)*e26-e17*e25*e25+2*e18*e24*e25+e17*e24*e24+2*e16*e23*e24-e17*e23*e23-e17*e22*e22+2*e18*e21*e22+e17*e21*e21+2*e16*e20*e21-e17*e20*e20;
    M(7,9)[0] = e37*e38*e38+(2*e34*e35+2*e31*e32)*e38+e37*e37*e37+(e36*e36-e35*e35+e34*e34-e33*e33-e32*e32+e31*e31-e30*e30)*e37+(2*e33*e34+2*e30*e31)*e36;
    M(7,9)[1] = e27*e38*e38+(2*e28*e37+2*e24*e35+2*e25*e34+2*e21*e32+2*e22*e31)*e38+3*e27*e37*e37+(2*e26*e36-2*e25*e35+2*e24*e34-2*e23*e33-2*e22*e32+2*e21*e31-2*e20*e30)*e37+e27*e36*e36+(2*e23*e34+2*e24*e33+2*e20*e31+2*e21*e30)*e36-e27*e35*e35+2*e28*e34*e35+e27*e34*e34+2*e26*e33*e34-e27*e33*e33-e27*e32*e32+2*e28*e31*e32+e27*e31*e31+2*e26*e30*e31-e27*e30*e30;
    M(7,9)[2] = (2*e27*e28+2*e24*e25+2*e21*e22)*e38+(e28*e28+3*e27*e27+e26*e26-e25*e25+e24*e24-e23*e23-e22*e22+e21*e21-e20*e20)*e37+(2*e26*e27+2*e23*e24+2*e20*e21)*e36+(2*e24*e28-2*e25*e27)*e35+(2*e25*e28+2*e24*e27+2*e23*e26)*e34+(2*e24*e26-2*e23*e27)*e33+(2*e21*e28-2*e22*e27)*e32+(2*e22*e28+2*e21*e27+2*e20*e26)*e31+(2*e21*e26-2*e20*e27)*e30;
    M(7,9)[3] = e27*e28*e28+(2*e24*e25+2*e21*e22)*e28+e27*e27*e27+(e26*e26-e25*e25+e24*e24-e23*e23-e22*e22+e21*e21-e20*e20)*e27+(2*e23*e24+2*e20*e21)*e26;
    M(8,0)[0] = e08*e08*e08+(e07*e07+e06*e06+e05*e05-e04*e04-e03*e03+e02*e02-e01*e01-e00*e00)*e08+(2*e04*e05+2*e01*e02)*e07+(2*e03*e05+2*e00*e02)*e06;
    M(8,1)[0] = e18*e18*e18+(e17*e17+e16*e16+e15*e15-e14*e14-e13*e13+e12*e12-e11*e11-e10*e10)*e18+(2*e14*e15+2*e11*e12)*e17+(2*e13*e15+2*e10*e12)*e16;
    M(8,2)[0] = (3*e08*e08+e07*e07+e06*e06+e05*e05-e04*e04-e03*e03+e02*e02-e01*e01-e00*e00)*e18+(2*e07*e08+2*e04*e05+2*e01*e02)*e17+(2*e06*e08+2*e03*e05+2*e00*e02)*e16+(2*e05*e08+2*e04*e07+2*e03*e06)*e15+(2*e05*e07-2*e04*e08)*e14+(2*e05*e06-2*e03*e08)*e13+(2*e02*e08+2*e01*e07+2*e00*e06)*e12+(2*e02*e07-2*e01*e08)*e11+(2*e02*e06-2*e00*e08)*e10;
    M(8,3)[0] = 3*e08*e18*e18+(2*e07*e17+2*e06*e16+2*e05*e15-2*e04*e14-2*e03*e13+2*e02*e12-2*e01*e11-2*e00*e10)*e18+e08*e17*e17+(2*e04*e15+2*e05*e14+2*e01*e12+2*e02*e11)*e17+e08*e16*e16+(2*e03*e15+2*e05*e13+2*e00*e12+2*e02*e10)*e16+e08*e15*e15+(2*e07*e14+2*e06*e13)*e15-e08*e14*e14-e08*e13*e13+e08*e12*e12+(2*e07*e11+2*e06*e10)*e12-e08*e11*e11-e08*e10*e10;
    M(8,4)[0] = (3*e08*e08+e07*e07+e06*e06+e05*e05-e04*e04-e03*e03+e02*e02-e01*e01-e00*e00)*e38+(2*e07*e08+2*e04*e05+2*e01*e02)*e37+(2*e06*e08+2*e03*e05+2*e00*e02)*e36+(2*e05*e08+2*e04*e07+2*e03*e06)*e35+(2*e05*e07-2*e04*e08)*e34+(2*e05*e06-2*e03*e08)*e33+(2*e02*e08+2*e01*e07+2*e00*e06)*e32+(2*e02*e07-2*e01*e08)*e31+(2*e02*e06-2*e00*e08)*e30;
    M(8,4)[1] = (3*e08*e08+e07*e07+e06*e06+e05*e05-e04*e04-e03*e03+e02*e02-e01*e01-e00*e00)*e28+(2*e07*e08+2*e04*e05+2*e01*e02)*e27+(2*e06*e08+2*e03*e05+2*e00*e02)*e26+(2*e05*e08+2*e04*e07+2*e03*e06)*e25+(2*e05*e07-2*e04*e08)*e24+(2*e05*e06-2*e03*e08)*e23+(2*e02*e08+2*e01*e07+2*e00*e06)*e22+(2*e02*e07-2*e01*e08)*e21+(2*e02*e06-2*e00*e08)*e20;
    M(8,5)[0] = (3*e18*e18+e17*e17+e16*e16+e15*e15-e14*e14-e13*e13+e12*e12-e11*e11-e10*e10)*e38+(2*e17*e18+2*e14*e15+2*e11*e12)*e37+(2*e16*e18+2*e13*e15+2*e10*e12)*e36+(2*e15*e18+2*e14*e17+2*e13*e16)*e35+(2*e15*e17-2*e14*e18)*e34+(2*e15*e16-2*e13*e18)*e33+(2*e12*e18+2*e11*e17+2*e10*e16)*e32+(2*e12*e17-2*e11*e18)*e31+(2*e12*e16-2*e10*e18)*e30;
    M(8,5)[1] = (3*e18*e18+e17*e17+e16*e16+e15*e15-e14*e14-e13*e13+e12*e12-e11*e11-e10*e10)*e28+(2*e17*e18+2*e14*e15+2*e11*e12)*e27+(2*e16*e18+2*e13*e15+2*e10*e12)*e26+(2*e15*e18+2*e14*e17+2*e13*e16)*e25+(2*e15*e17-2*e14*e18)*e24+(2*e15*e16-2*e13*e18)*e23+(2*e12*e18+2*e11*e17+2*e10*e16)*e22+(2*e12*e17-2*e11*e18)*e21+(2*e12*e16-2*e10*e18)*e20;
    M(8,6)[0] = (6*e08*e18+2*e07*e17+2*e06*e16+2*e05*e15-2*e04*e14-2*e03*e13+2*e02*e12-2*e01*e11-2*e00*e10)*e38+(2*e07*e18+2*e08*e17+2*e04*e15+2*e05*e14+2*e01*e12+2*e02*e11)*e37+(2*e06*e18+2*e08*e16+2*e03*e15+2*e05*e13+2*e00*e12+2*e02*e10)*e36+(2*e05*e18+2*e04*e17+2*e03*e16+2*e08*e15+2*e07*e14+2*e06*e13)*e35+(-2*e04*e18+2*e05*e17+2*e07*e15-2*e08*e14)*e34+(-2*e03*e18+2*e05*e16+2*e06*e15-2*e08*e13)*e33+(2*e02*e18+2*e01*e17+2*e00*e16+2*e08*e12+2*e07*e11+2*e06*e10)*e32+(-2*e01*e18+2*e02*e17+2*e07*e12-2*e08*e11)*e31+(-2*e00*e18+2*e02*e16+2*e06*e12-2*e08*e10)*e30;
    M(8,6)[1] = (6*e08*e18+2*e07*e17+2*e06*e16+2*e05*e15-2*e04*e14-2*e03*e13+2*e02*e12-2*e01*e11-2*e00*e10)*e28+(2*e07*e18+2*e08*e17+2*e04*e15+2*e05*e14+2*e01*e12+2*e02*e11)*e27+(2*e06*e18+2*e08*e16+2*e03*e15+2*e05*e13+2*e00*e12+2*e02*e10)*e26+(2*e05*e18+2*e04*e17+2*e03*e16+2*e08*e15+2*e07*e14+2*e06*e13)*e25+(-2*e04*e18+2*e05*e17+2*e07*e15-2*e08*e14)*e24+(-2*e03*e18+2*e05*e16+2*e06*e15-2*e08*e13)*e23+(2*e02*e18+2*e01*e17+2*e00*e16+2*e08*e12+2*e07*e11+2*e06*e10)*e22+(-2*e01*e18+2*e02*e17+2*e07*e12-2*e08*e11)*e21+(-2*e00*e18+2*e02*e16+2*e06*e12-2*e08*e10)*e20;
    M(8,7)[0] = 3*e08*e38*e38+(2*e07*e37+2*e06*e36+2*e05*e35-2*e04*e34-2*e03*e33+2*e02*e32-2*e01*e31-2*e00*e30)*e38+e08*e37*e37+(2*e04*e35+2*e05*e34+2*e01*e32+2*e02*e31)*e37+e08*e36*e36+(2*e03*e35+2*e05*e33+2*e00*e32+2*e02*e30)*e36+e08*e35*e35+(2*e07*e34+2*e06*e33)*e35-e08*e34*e34-e08*e33*e33+e08*e32*e32+(2*e07*e31+2*e06*e30)*e32-e08*e31*e31-e08*e30*e30;
    M(8,7)[1] = (6*e08*e28+2*e07*e27+2*e06*e26+2*e05*e25-2*e04*e24-2*e03*e23+2*e02*e22-2*e01*e21-2*e00*e20)*e38+(2*e07*e28+2*e08*e27+2*e04*e25+2*e05*e24+2*e01*e22+2*e02*e21)*e37+(2*e06*e28+2*e08*e26+2*e03*e25+2*e05*e23+2*e00*e22+2*e02*e20)*e36+(2*e05*e28+2*e04*e27+2*e03*e26+2*e08*e25+2*e07*e24+2*e06*e23)*e35+(-2*e04*e28+2*e05*e27+2*e07*e25-2*e08*e24)*e34+(-2*e03*e28+2*e05*e26+2*e06*e25-2*e08*e23)*e33+(2*e02*e28+2*e01*e27+2*e00*e26+2*e08*e22+2*e07*e21+2*e06*e20)*e32+(-2*e01*e28+2*e02*e27+2*e07*e22-2*e08*e21)*e31+(-2*e00*e28+2*e02*e26+2*e06*e22-2*e08*e20)*e30;
    M(8,7)[2] = 3*e08*e28*e28+(2*e07*e27+2*e06*e26+2*e05*e25-2*e04*e24-2*e03*e23+2*e02*e22-2*e01*e21-2*e00*e20)*e28+e08*e27*e27+(2*e04*e25+2*e05*e24+2*e01*e22+2*e02*e21)*e27+e08*e26*e26+(2*e03*e25+2*e05*e23+2*e00*e22+2*e02*e20)*e26+e08*e25*e25+(2*e07*e24+2*e06*e23)*e25-e08*e24*e24-e08*e23*e23+e08*e22*e22+(2*e07*e21+2*e06*e20)*e22-e08*e21*e21-e08*e20*e20;
    M(8,8)[0] = 3*e18*e38*e38+(2*e17*e37+2*e16*e36+2*e15*e35-2*e14*e34-2*e13*e33+2*e12*e32-2*e11*e31-2*e10*e30)*e38+e18*e37*e37+(2*e14*e35+2*e15*e34+2*e11*e32+2*e12*e31)*e37+e18*e36*e36+(2*e13*e35+2*e15*e33+2*e10*e32+2*e12*e30)*e36+e18*e35*e35+(2*e17*e34+2*e16*e33)*e35-e18*e34*e34-e18*e33*e33+e18*e32*e32+(2*e17*e31+2*e16*e30)*e32-e18*e31*e31-e18*e30*e30;
    M(8,8)[1] = (6*e18*e28+2*e17*e27+2*e16*e26+2*e15*e25-2*e14*e24-2*e13*e23+2*e12*e22-2*e11*e21-2*e10*e20)*e38+(2*e17*e28+2*e18*e27+2*e14*e25+2*e15*e24+2*e11*e22+2*e12*e21)*e37+(2*e16*e28+2*e18*e26+2*e13*e25+2*e15*e23+2*e10*e22+2*e12*e20)*e36+(2*e15*e28+2*e14*e27+2*e13*e26+2*e18*e25+2*e17*e24+2*e16*e23)*e35+(-2*e14*e28+2*e15*e27+2*e17*e25-2*e18*e24)*e34+(-2*e13*e28+2*e15*e26+2*e16*e25-2*e18*e23)*e33+(2*e12*e28+2*e11*e27+2*e10*e26+2*e18*e22+2*e17*e21+2*e16*e20)*e32+(-2*e11*e28+2*e12*e27+2*e17*e22-2*e18*e21)*e31+(-2*e10*e28+2*e12*e26+2*e16*e22-2*e18*e20)*e30;
    M(8,8)[2] = 3*e18*e28*e28+(2*e17*e27+2*e16*e26+2*e15*e25-2*e14*e24-2*e13*e23+2*e12*e22-2*e11*e21-2*e10*e20)*e28+e18*e27*e27+(2*e14*e25+2*e15*e24+2*e11*e22+2*e12*e21)*e27+e18*e26*e26+(2*e13*e25+2*e15*e23+2*e10*e22+2*e12*e20)*e26+e18*e25*e25+(2*e17*e24+2*e16*e23)*e25-e18*e24*e24-e18*e23*e23+e18*e22*e22+(2*e17*e21+2*e16*e20)*e22-e18*e21*e21-e18*e20*e20;
    M(8,9)[0] = e38*e38*e38+(e37*e37+e36*e36+e35*e35-e34*e34-e33*e33+e32*e32-e31*e31-e30*e30)*e38+(2*e34*e35+2*e31*e32)*e37+(2*e33*e35+2*e30*e32)*e36;
    M(8,9)[1] = 3*e28*e38*e38+(2*e27*e37+2*e26*e36+2*e25*e35-2*e24*e34-2*e23*e33+2*e22*e32-2*e21*e31-2*e20*e30)*e38+e28*e37*e37+(2*e24*e35+2*e25*e34+2*e21*e32+2*e22*e31)*e37+e28*e36*e36+(2*e23*e35+2*e25*e33+2*e20*e32+2*e22*e30)*e36+e28*e35*e35+(2*e27*e34+2*e26*e33)*e35-e28*e34*e34-e28*e33*e33+e28*e32*e32+(2*e27*e31+2*e26*e30)*e32-e28*e31*e31-e28*e30*e30;
    M(8,9)[2] = (3*e28*e28+e27*e27+e26*e26+e25*e25-e24*e24-e23*e23+e22*e22-e21*e21-e20*e20)*e38+(2*e27*e28+2*e24*e25+2*e21*e22)*e37+(2*e26*e28+2*e23*e25+2*e20*e22)*e36+(2*e25*e28+2*e24*e27+2*e23*e26)*e35+(2*e25*e27-2*e24*e28)*e34+(2*e25*e26-2*e23*e28)*e33+(2*e22*e28+2*e21*e27+2*e20*e26)*e32+(2*e22*e27-2*e21*e28)*e31+(2*e22*e26-2*e20*e28)*e30;
    M(8,9)[3] = e28*e28*e28+(e27*e27+e26*e26+e25*e25-e24*e24-e23*e23+e22*e22-e21*e21-e20*e20)*e28+(2*e24*e25+2*e21*e22)*e27+(2*e23*e25+2*e20*e22)*e26;
    M(9,0)[0] = (e00*e04-e01*e03)*e08+(e02*e03-e00*e05)*e07+(e01*e05-e02*e04)*e06;
    M(9,1)[0] = (e10*e14-e11*e13)*e18+(e12*e13-e10*e15)*e17+(e11*e15-e12*e14)*e16;
    M(9,2)[0] = (e00*e04-e01*e03)*e18+(e02*e03-e00*e05)*e17+(e01*e05-e02*e04)*e16+(e01*e06-e00*e07)*e15+(e00*e08-e02*e06)*e14+(e02*e07-e01*e08)*e13+(e03*e07-e04*e06)*e12+(e05*e06-e03*e08)*e11+(e04*e08-e05*e07)*e10;
    M(9,3)[0] = (e00*e14-e01*e13-e03*e11+e04*e10)*e18+(-e00*e15+e02*e13+e03*e12-e05*e10)*e17+(e01*e15-e02*e14-e04*e12+e05*e11)*e16+(e06*e11-e07*e10)*e15+(e08*e10-e06*e12)*e14+(e07*e12-e08*e11)*e13;
    M(9,4)[0] = (e00*e04-e01*e03)*e38+(e02*e03-e00*e05)*e37+(e01*e05-e02*e04)*e36+(e01*e06-e00*e07)*e35+(e00*e08-e02*e06)*e34+(e02*e07-e01*e08)*e33+(e03*e07-e04*e06)*e32+(e05*e06-e03*e08)*e31+(e04*e08-e05*e07)*e30;
    M(9,4)[1] = (e00*e04-e01*e03)*e28+(e02*e03-e00*e05)*e27+(e01*e05-e02*e04)*e26+(e01*e06-e00*e07)*e25+(e00*e08-e02*e06)*e24+(e02*e07-e01*e08)*e23+(e03*e07-e04*e06)*e22+(e05*e06-e03*e08)*e21+(e04*e08-e05*e07)*e20;
    M(9,5)[0] = (e10*e14-e11*e13)*e38+(e12*e13-e10*e15)*e37+(e11*e15-e12*e14)*e36+(e11*e16-e10*e17)*e35+(e10*e18-e12*e16)*e34+(e12*e17-e11*e18)*e33+(e13*e17-e14*e16)*e32+(e15*e16-e13*e18)*e31+(e14*e18-e15*e17)*e30;
    M(9,5)[1] = (e10*e14-e11*e13)*e28+(e12*e13-e10*e15)*e27+(e11*e15-e12*e14)*e26+(e11*e16-e10*e17)*e25+(e10*e18-e12*e16)*e24+(e12*e17-e11*e18)*e23+(e13*e17-e14*e16)*e22+(e15*e16-e13*e18)*e21+(e14*e18-e15*e17)*e20;
    M(9,6)[0] = (e00*e14-e01*e13-e03*e11+e04*e10)*e38+(-e00*e15+e02*e13+e03*e12-e05*e10)*e37+(e01*e15-e02*e14-e04*e12+e05*e11)*e36+(-e00*e17+e01*e16+e06*e11-e07*e10)*e35+(e00*e18-e02*e16-e06*e12+e08*e10)*e34+(-e01*e18+e02*e17+e07*e12-e08*e11)*e33+(e03*e17-e04*e16-e06*e14+e07*e13)*e32+(-e03*e18+e05*e16+e06*e15-e08*e13)*e31+(e04*e18-e05*e17-e07*e15+e08*e14)*e30;
    M(9,6)[1] = (e00*e14-e01*e13-e03*e11+e04*e10)*e28+(-e00*e15+e02*e13+e03*e12-e05*e10)*e27+(e01*e15-e02*e14-e04*e12+e05*e11)*e26+(-e00*e17+e01*e16+e06*e11-e07*e10)*e25+(e00*e18-e02*e16-e06*e12+e08*e10)*e24+(-e01*e18+e02*e17+e07*e12-e08*e11)*e23+(e03*e17-e04*e16-e06*e14+e07*e13)*e22+(-e03*e18+e05*e16+e06*e15-e08*e13)*e21+(e04*e18-e05*e17-e07*e15+e08*e14)*e20;
    M(9,7)[0] = (e00*e34-e01*e33-e03*e31+e04*e30)*e38+(-e00*e35+e02*e33+e03*e32-e05*e30)*e37+(e01*e35-e02*e34-e04*e32+e05*e31)*e36+(e06*e31-e07*e30)*e35+(e08*e30-e06*e32)*e34+(e07*e32-e08*e31)*e33;
    M(9,7)[1] = (e00*e24-e01*e23-e03*e21+e04*e20)*e38+(-e00*e25+e02*e23+e03*e22-e05*e20)*e37+(e01*e25-e02*e24-e04*e22+e05*e21)*e36+(-e00*e27+e01*e26+e06*e21-e07*e20)*e35+(e00*e28-e02*e26-e06*e22+e08*e20)*e34+(-e01*e28+e02*e27+e07*e22-e08*e21)*e33+(e03*e27-e04*e26-e06*e24+e07*e23)*e32+(-e03*e28+e05*e26+e06*e25-e08*e23)*e31+(e04*e28-e05*e27-e07*e25+e08*e24)*e30;
    M(9,7)[2] = (e00*e24-e01*e23-e03*e21+e04*e20)*e28+(-e00*e25+e02*e23+e03*e22-e05*e20)*e27+(e01*e25-e02*e24-e04*e22+e05*e21)*e26+(e06*e21-e07*e20)*e25+(e08*e20-e06*e22)*e24+(e07*e22-e08*e21)*e23;
    M(9,8)[0] = (e10*e34-e11*e33-e13*e31+e14*e30)*e38+(-e10*e35+e12*e33+e13*e32-e15*e30)*e37+(e11*e35-e12*e34-e14*e32+e15*e31)*e36+(e16*e31-e17*e30)*e35+(e18*e30-e16*e32)*e34+(e17*e32-e18*e31)*e33;
    M(9,8)[1] = (e10*e24-e11*e23-e13*e21+e14*e20)*e38+(-e10*e25+e12*e23+e13*e22-e15*e20)*e37+(e11*e25-e12*e24-e14*e22+e15*e21)*e36+(-e10*e27+e11*e26+e16*e21-e17*e20)*e35+(e10*e28-e12*e26-e16*e22+e18*e20)*e34+(-e11*e28+e12*e27+e17*e22-e18*e21)*e33+(e13*e27-e14*e26-e16*e24+e17*e23)*e32+(-e13*e28+e15*e26+e16*e25-e18*e23)*e31+(e14*e28-e15*e27-e17*e25+e18*e24)*e30;
    M(9,8)[2] = (e10*e24-e11*e23-e13*e21+e14*e20)*e28+(-e10*e25+e12*e23+e13*e22-e15*e20)*e27+(e11*e25-e12*e24-e14*e22+e15*e21)*e26+(e16*e21-e17*e20)*e25+(e18*e20-e16*e22)*e24+(e17*e22-e18*e21)*e23;
    M(9,9)[0] = (e30*e34-e31*e33)*e38+(e32*e33-e30*e35)*e37+(e31*e35-e32*e34)*e36;
    M(9,9)[1] = (e20*e34-e21*e33-e23*e31+e24*e30)*e38+(-e20*e35+e22*e33+e23*e32-e25*e30)*e37+(e21*e35-e22*e34-e24*e32+e25*e31)*e36+(e26*e31-e27*e30)*e35+(e28*e30-e26*e32)*e34+(e27*e32-e28*e31)*e33;
    M(9,9)[2] = (e20*e24-e21*e23)*e38+(e22*e23-e20*e25)*e37+(e21*e25-e22*e24)*e36+(e21*e26-e20*e27)*e35+(e20*e28-e22*e26)*e34+(e22*e27-e21*e28)*e33+(e23*e27-e24*e26)*e32+(e25*e26-e23*e28)*e31+(e24*e28-e25*e27)*e30;
    M(9,9)[3] = (e20*e24-e21*e23)*e28+(e22*e23-e20*e25)*e27+(e21*e25-e22*e24)*e26;









    // symbolic determinant using interpolation based on the papers:
    // "Symbolic Determinants: Calculating the Degree", http://www.cs.tamu.edu/academics/tr/tamu-cs-tr-2005-7-1
    // "Multivariate Determinants Through Univariate Interpolation", http://www.cs.tamu.edu/academics/tr/tamu-cs-tr-2005-7-2

    // max power of the determinant is x^10, so we need 11 points for interpolation
    // the 11 points are at x = [-5, -4 .... 4, 5], luckily there is no overflow at x^10

    Matrix<double, 11, 11>              X;
    Matrix<double, 11, 1>               b;
    Matrix<double, 10, 10, RowMajor>    ret_eval;
    X.col(0).fill(1);

    // first column of M is the lowest power
    for(int i=-5, j=0; i <= 5; i++, j++) {
        M.Eval(i, ret_eval.data());
        double t = i;
        for(int k=1; k < 11; k++) {
            X(j,k) = t;
            t *= i;
        }
        b(j,0) = ret_eval.determinant();
    }

    // Using full pivot LU inverse, as partial pivot LU inverse (the default) generates less accurate inverses
    Matrix<double, 11, 1>   a = X.fullPivLu().inverse()*b;

    // Solve for z
    int degrees = 10;
    double coeffs[11];
    double zeror[11], zeroi[11];
    VectorXd solutions;

    // rpoly_ak1 expects highest power first
    for(int i=0; i < a.size(); i++)
        coeffs[i] = a(a.size()-i-1);

    // Find roots of polynomial
    rpoly_ak1(coeffs, &degrees, zeror, zeroi);

    for(int i=0; i < degrees; i++) {
        if(zeroi[i] == 0) {
            solutions.conservativeResize(solutions.size()+1);
            solutions(solutions.size()-1) = zeror[i];
        }
    }

    if(solutions.size() < 1) {
        return false;
    }

    // Back substitute the z values and compute null space to get x,y
    EMatrix E;
    PMatrix P_ref = PMatrix::Identity();
    PMatrix P[4];
    Vector4d pt3d;
    Vector3d x1, x2;
#ifdef ROBUST_TEST
    int valid_solutions = 0;
    int best_inliers = 0;
#endif
    JacobiSVD<Matrix<double, 10, 10, RowMajor> >    svd2(10,10);
    for(int i=0; i < solutions.size(); i++) {
        double z = solutions(i);

        M.Eval(z, ret_eval.data());

        // Extract svd full V
        svd2.compute(ret_eval, ComputeFullV);

        // svd2.matrixV().col(9) represents
        // [x^3 , y^3 , x^2 y, xy^2 , x^2 , y^2 , xy, x, y, 1]^T

        // Scale it so the last element is 1, to get the correct answer
        double x = svd2.matrixV()(7,9) / svd2.matrixV()(9,9);
        double y = svd2.matrixV()(8,9) / svd2.matrixV()(9,9);

        // Build the essential matrix from all the known x,y,z values
        E(0,0) = e00*x + e10*y + e20*z + e30;
        E(0,1) = e01*x + e11*y + e21*z + e31;
        E(0,2) = e02*x + e12*y + e22*z + e32;

        E(1,0) = e03*x + e13*y + e23*z + e33;
        E(1,1) = e04*x + e14*y + e24*z + e34;
        E(1,2) = e05*x + e15*y + e25*z + e35;

        E(2,0) = e06*x + e16*y + e26*z + e36;
        E(2,1) = e07*x + e17*y + e27*z + e37;
        E(2,2) = e08*x + e18*y + e28*z + e38;

        // Test to see if this E matrix is the correct one we're after
        ProjectionsFromEssential(E, P[0], P[1], P[2], P[3]);

#ifdef ROBUST_TEST
        // Robust chirality test to handle outliers
        for(int j=0; j < 4; j++) {
            int inliers=0;
            for(int k=0; k < num_pts; k++) {
                TriangulatePoint(pt3d, pts1[k*2], pts1[k*2+1], pts2[k*2], pts2[k*2+1], P_ref, P[j]);
                x1 = P_ref * pt3d;
                x2 = P[j]  * pt3d;
                int s   = (pt3d(3,0) < 0 ? -1 : 1),
                    s1  =   (x1(2,0) < 0 ? -1 : 1),
                    s2  =   (x2(2,0) < 0 ? -1 : 1);
                if( (s1 + s2)*s == 2)
                    inliers++;
                // If any outliers for 5 points or 75% outliers for larger num_pts then reject the solution as probably invalid
                if( (num_pts == 5 && inliers <= k) || (inliers < k/4) ) {
                    inliers = 0;
                    break;
                }
            }
            if(inliers >= best_inliers && (inliers >= 5)) {
                // Add this solution to the valid solutions list
                if( inliers > best_inliers )        // If this has more inliers, it becomes the only valid solution
                    valid_solutions = 0;
                best_inliers = inliers;
                AllE[valid_solutions] = E;
                AllP[valid_solutions] = P[j];
                if( valid_solutions < 10 )          // Should never exceed 10 unless something has gone badly wrong
                    ++valid_solutions;
            }
        }
#else
        EMatrix best_E;
        PMatrix best_P;
        int best_inliers = 0;
        bool found = false;

        for(int j=0; j < 4; j++) {
            pt3d = TriangulatePoint(pts1[0], pts1[1], pts2[0], pts2[1], P_ref, P[j]);
            double depth1 = CalcDepth(pt3d, P_ref);
            double depth2 = CalcDepth(pt3d, P[j]);

            if(depth1 > 0 && depth2 > 0){
                int inliers = 1; // number of points in front of the camera

                for(int k=1; k < num_pts; k++) {
                    pt3d = TriangulatePoint(pts1[k*2], pts1[k*2+1], pts2[k*2], pts2[k*2+1], P_ref, P[j]);
                    depth1 = CalcDepth(pt3d, P_ref);
                    depth2 = CalcDepth(pt3d, P[j]);

                    if(depth1 > 0 && depth2 > 0) {
                        inliers++;
                    }
                }

                if(inliers > best_inliers && inliers >= 5) {
                    best_inliers = inliers;

                    best_E = E;
                    best_P = P[j];
                    found = true;
                }

                // Special case, with 5 points you can get a perfect solution
                if(num_pts == 5 && inliers == 5) {
                    break;
                }
            }
        }

        if(found) {
        ret_E.push_back(best_E);
        ret_P.push_back(best_P);
        ret_inliers.push_back(best_inliers);
        }
#endif
    }

    if(ret_E.size()) {
        return true;
    }

    return false;
}

static void ProjectionsFromEssential(const EMatrix &E, PMatrix &P1, PMatrix &P2, PMatrix &P3, PMatrix &P4)
{
    // Assumes input E is a rank 2 matrix, with equal singular values
    JacobiSVD<EMatrix> svd(E, ComputeFullU | ComputeFullV);
    const Matrix3d &U = svd.matrixU(),
                   &V = svd.matrixV();
    Matrix3d W;

	// Find rotation, translation
    W.setZero();
    W(0,1) = -1.0;
    W(1,0) = 1.0;
    W(2,2) = 1.0;

    // Rotation
    Matrix3d R1 = U * W             * V.transpose();
    Matrix3d R2 = U * W.transpose() * V.transpose();

//   if( R1.determinant() < 0 )
//        R1 *= -1;
//    if( R2.determinant() < 0 )
//        R2 *= -1;

    P1.block(0,0,3,3) = R1;
    P2.block(0,0,3,3) = R1;
    P3.block(0,0,3,3) = R2;
    P4.block(0,0,3,3) = R2;

    // Translation
    P1.col(3) =  U.col(2);
    P2.col(3) = -U.col(2);
    P3.col(3) =  U.col(2);
    P4.col(3) = -U.col(2);
}

// X is 4x1 is [x,y,z,w]
// P is 3x4 projection matrix
double CalcDepth(const Vector4d &X, const PMatrix &P)
{
    // back project
    Vector3d X2 = P*X;

    double det = P.block(0,0,3,3).determinant();
    double w = X2(2,0);
    double W = X(3,0);

    double a = P(0,2);
    double b = P(1,2);
    double c = P(2,2);

    double m3 = sqrt(a*a + b*b + c*c);  // 3rd column of M

    double sign;

    if(det > 0) {
        sign = 1;
    }
    else {
        sign = -1;
    }

    return (w/W)*(sign/m3);
}

static Vector4d TriangulatePoint(double x1, double y1, double x2, double y2, const PMatrix &P1, const PMatrix &P2)
{
    Matrix4d A;

    A(0,0) = x1*P1(2,0) - P1(0,0);
    A(0,1) = x1*P1(2,1) - P1(0,1);
    A(0,2) = x1*P1(2,2) - P1(0,2);
    A(0,3) = x1*P1(2,3) - P1(0,3);

    A(1,0) = y1*P1(2,0) - P1(1,0);
    A(1,1) = y1*P1(2,1) - P1(1,1);
    A(1,2) = y1*P1(2,2) - P1(1,2);
    A(1,3) = y1*P1(2,3) - P1(1,3);

    A(2,0) = x2*P2(2,0) - P2(0,0);
    A(2,1) = x2*P2(2,1) - P2(0,1);
    A(2,2) = x2*P2(2,2) - P2(0,2);
    A(2,3) = x2*P2(2,3) - P2(0,3);

    A(3,0) = y2*P2(2,0) - P2(1,0);
    A(3,1) = y2*P2(2,1) - P2(1,1);
    A(3,2) = y2*P2(2,2) - P2(1,2);
    A(3,3) = y2*P2(2,3) - P2(1,3);

    JacobiSVD<Matrix4d> svd(A, ComputeFullV);

    return svd.matrixV().col(3);
}

}
